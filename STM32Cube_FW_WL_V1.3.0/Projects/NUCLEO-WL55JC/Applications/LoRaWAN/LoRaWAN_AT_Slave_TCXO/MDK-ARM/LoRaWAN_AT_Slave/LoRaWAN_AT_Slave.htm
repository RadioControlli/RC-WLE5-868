<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [LoRaWAN_AT_Slave\LoRaWAN_AT_Slave.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image LoRaWAN_AT_Slave\LoRaWAN_AT_Slave.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6130100: Last Updated: Sat Sep 16 11:56:05 2023
<BR><P>
<H3>Maximum Stack Usage =       1008 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
LmHandlerProcess &rArr; LoRaMacProcess &rArr; LoRaMacCryptoUnsecureMessage &rArr; SecureElementVerifyAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; xor_block
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[35]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[35]">ADC_IRQHandler</a><BR>
 <LI><a href="#[13a]">memcpy1</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13a]">memcpy1</a><BR>
 <LI><a href="#[138]">memset1</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[138]">memset1</a><BR>
 <LI><a href="#[1a4]">UTIL_MEM_cpy_8</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a4]">UTIL_MEM_cpy_8</a><BR>
 <LI><a href="#[336]">UTIL_MEM_set_8</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[336]">UTIL_MEM_set_8</a><BR>
 <LI><a href="#[1d]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">BusFault_Handler</a><BR>
 <LI><a href="#[1b]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">HardFault_Handler</a><BR>
 <LI><a href="#[1c]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">MemManage_Handler</a><BR>
 <LI><a href="#[1a]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">NMI_Handler</a><BR>
 <LI><a href="#[1e]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">UsageFault_Handler</a><BR>
 <LI><a href="#[359]">UART_EndTxTransfer</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[359]">UART_EndTxTransfer</a><BR>
 <LI><a href="#[f4]">RadioSetPublicNetwork</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e0]">RadioSetModem</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[35]">ADC_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[56]">AES_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[ba]">AT_ADR_get</a> from lora_at.o(.text.AT_ADR_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[bb]">AT_ADR_set</a> from lora_at.o(.text.AT_ADR_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[ab]">AT_AppKey_get</a> from lora_at.o(.text.AT_AppKey_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[ac]">AT_AppKey_set</a> from lora_at.o(.text.AT_AppKey_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[af]">AT_AppSKey_get</a> from lora_at.o(.text.AT_AppSKey_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[b0]">AT_AppSKey_set</a> from lora_at.o(.text.AT_AppSKey_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[dc]">AT_Certif</a> from lora_at.o(.text.AT_Certif) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[bc]">AT_DataRate_get</a> from lora_at.o(.text.AT_DataRate_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[bd]">AT_DataRate_set</a> from lora_at.o(.text.AT_DataRate_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[b1]">AT_DevAddr_get</a> from lora_at.o(.text.AT_DevAddr_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[b2]">AT_DevAddr_set</a> from lora_at.o(.text.AT_DevAddr_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[b3]">AT_DevEUI_get</a> from lora_at.o(.text.AT_DevEUI_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[b4]">AT_DevEUI_set</a> from lora_at.o(.text.AT_DevEUI_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[c0]">AT_DeviceClass_get</a> from lora_at.o(.text.AT_DeviceClass_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[c1]">AT_DeviceClass_set</a> from lora_at.o(.text.AT_DeviceClass_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[c2]">AT_DutyCycle_get</a> from lora_at.o(.text.AT_DutyCycle_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[c3]">AT_DutyCycle_set</a> from lora_at.o(.text.AT_DutyCycle_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[b7]">AT_Join</a> from lora_at.o(.text.AT_Join) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[c4]">AT_JoinAcceptDelay1_get</a> from lora_at.o(.text.AT_JoinAcceptDelay1_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[c5]">AT_JoinAcceptDelay1_set</a> from lora_at.o(.text.AT_JoinAcceptDelay1_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[c6]">AT_JoinAcceptDelay2_get</a> from lora_at.o(.text.AT_JoinAcceptDelay2_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[c7]">AT_JoinAcceptDelay2_set</a> from lora_at.o(.text.AT_JoinAcceptDelay2_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[a7]">AT_JoinEUI_get</a> from lora_at.o(.text.AT_JoinEUI_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[a8]">AT_JoinEUI_set</a> from lora_at.o(.text.AT_JoinEUI_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[b8]">AT_Link_Check</a> from lora_at.o(.text.AT_Link_Check) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[a3]">AT_LocalTime_get</a> from lora_at.o(.text.AT_LocalTime_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[b5]">AT_NetworkID_get</a> from lora_at.o(.text.AT_NetworkID_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[b6]">AT_NetworkID_set</a> from lora_at.o(.text.AT_NetworkID_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[a9]">AT_NwkKey_get</a> from lora_at.o(.text.AT_NwkKey_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[aa]">AT_NwkKey_set</a> from lora_at.o(.text.AT_NwkKey_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[ad]">AT_NwkSKey_get</a> from lora_at.o(.text.AT_NwkSKey_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[ae]">AT_NwkSKey_set</a> from lora_at.o(.text.AT_NwkSKey_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[d2]">AT_PingSlot_get</a> from lora_at.o(.text.AT_PingSlot_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[d3]">AT_PingSlot_set</a> from lora_at.o(.text.AT_PingSlot_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[be]">AT_Region_get</a> from lora_at.o(.text.AT_Region_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[bf]">AT_Region_set</a> from lora_at.o(.text.AT_Region_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[c8]">AT_Rx1Delay_get</a> from lora_at.o(.text.AT_Rx1Delay_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[c9]">AT_Rx1Delay_set</a> from lora_at.o(.text.AT_Rx1Delay_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[cc]">AT_Rx2DataRate_get</a> from lora_at.o(.text.AT_Rx2DataRate_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[cd]">AT_Rx2DataRate_set</a> from lora_at.o(.text.AT_Rx2DataRate_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[ca]">AT_Rx2Delay_get</a> from lora_at.o(.text.AT_Rx2Delay_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[cb]">AT_Rx2Delay_set</a> from lora_at.o(.text.AT_Rx2Delay_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[ce]">AT_Rx2Frequency_get</a> from lora_at.o(.text.AT_Rx2Frequency_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[cf]">AT_Rx2Frequency_set</a> from lora_at.o(.text.AT_Rx2Frequency_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[b9]">AT_Send</a> from lora_at.o(.text.AT_Send) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[d0]">AT_TransmitPower_get</a> from lora_at.o(.text.AT_TransmitPower_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[d1]">AT_TransmitPower_set</a> from lora_at.o(.text.AT_TransmitPower_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[dd]">AT_bat_get</a> from lora_at.o(.text.AT_bat_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[a4]">AT_reset</a> from lora_at.o(.text.AT_reset) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[a5]">AT_restore_factory_settings</a> from lora_at.o(.text.AT_restore_factory_settings) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[a0]">AT_return_error</a> from lora_at.o(.text.AT_return_error) referenced 55 times from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[a6]">AT_store_context</a> from lora_at.o(.text.AT_store_context) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[d6]">AT_test_get_config</a> from lora_at.o(.text.AT_test_get_config) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[d9]">AT_test_rx</a> from lora_at.o(.text.AT_test_rx) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[d5]">AT_test_rxRssi</a> from lora_at.o(.text.AT_test_rxRssi) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[d7]">AT_test_set_config</a> from lora_at.o(.text.AT_test_set_config) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[db]">AT_test_stop</a> from lora_at.o(.text.AT_test_stop) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[d8]">AT_test_tx</a> from lora_at.o(.text.AT_test_tx) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[d4]">AT_test_txTone</a> from lora_at.o(.text.AT_test_txTone) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[da]">AT_test_tx_hopping</a> from lora_at.o(.text.AT_test_tx_hopping) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[a1]">AT_verbose_get</a> from lora_at.o(.text.AT_verbose_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[a2]">AT_verbose_set</a> from lora_at.o(.text.AT_verbose_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[9f]">AT_version_get</a> from lora_at.o(.text.AT_version_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[1d]">BusFault_Handler</a> from stm32wlxx_it.o(.text.BusFault_Handler) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[37]">C2SEV_PWR_C2H_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[67]">CMD_GetChar</a> from lora_command.o(.text.CMD_GetChar) referenced from lora_command.o(.text.CMD_Init)
 <LI><a href="#[8b]">CMD_Process</a> from lora_command.o(.text.CMD_Process) referenced from lora_app.o(.text.LoRaWAN_Init)
 <LI><a href="#[38]">COMP_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[65]">CertifSend</a> from lora_at.o(.text.CertifSend) referenced from lora_at.o(.text.AT_Certif)
 <LI><a href="#[86]">CmdProcessNotify</a> from lora_app.o(.text.CmdProcessNotify) referenced from lora_app.o(.text.LoRaWAN_Init)
 <LI><a href="#[36]">DAC_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[2e]">DMA1_Channel1_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[2f]">DMA1_Channel2_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[30]">DMA1_Channel3_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[31]">DMA1_Channel4_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[32]">DMA1_Channel5_IRQHandler</a> from stm32wlxx_it.o(.text.DMA1_Channel5_IRQHandler) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[33]">DMA1_Channel6_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[34]">DMA1_Channel7_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[59]">DMA2_Channel1_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[5a]">DMA2_Channel2_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[5b]">DMA2_Channel3_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[5c]">DMA2_Channel4_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[5d]">DMA2_Channel5_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[5e]">DMA2_Channel6_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[5f]">DMA2_Channel7_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[60]">DMAMUX1_OVR_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[20]">DebugMon_Handler</a> from stm32wlxx_it.o(.text.DebugMon_Handler) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[29]">EXTI0_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[4c]">EXTI15_10_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[2a]">EXTI1_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[2b]">EXTI2_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[2c]">EXTI3_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[2d]">EXTI4_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[39]">EXTI9_5_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[27]">FLASH_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[0]">GetBatteryLevel</a> from sys_app.o(.text.GetBatteryLevel) referenced 2 times from lora_app.o(.data..L_MergedGlobals)
 <LI><a href="#[3]">GetDevAddr</a> from sys_app.o(.text.GetDevAddr) referenced 2 times from lora_app.o(.data..L_MergedGlobals)
 <LI><a href="#[1]">GetTemperatureLevel</a> from sys_app.o(.text.GetTemperatureLevel) referenced 2 times from lora_app.o(.data..L_MergedGlobals)
 <LI><a href="#[2]">GetUniqueId</a> from sys_app.o(.text.GetUniqueId) referenced 2 times from lora_app.o(.data..L_MergedGlobals)
 <LI><a href="#[8d]">HAL_GPIO_Init</a> from stm32wlxx_hal_gpio.o(.text.HAL_GPIO_Init) referenced from gpio.o(.text.MX_GPIO_Init)
 <LI><a href="#[52]">HSEM_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[1b]">HardFault_Handler</a> from stm32wlxx_it.o(.text.HardFault_Handler) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[42]">I2C1_ER_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[41]">I2C1_EV_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[44]">I2C2_ER_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[43]">I2C2_EV_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[54]">I2C3_ER_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[53]">I2C3_EV_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[50]">IPCC_C1_RX_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[51]">IPCC_C1_TX_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[8c]">LL_AHB2_GRP1_EnableClock</a> from gpio.o(.text.LL_AHB2_GRP1_EnableClock) referenced from gpio.o(.text.MX_GPIO_Init)
 <LI><a href="#[4a]">LPTIM1_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[4b]">LPTIM2_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[4e]">LPTIM3_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[49]">LPUART1_IRQHandler</a> from stm32wlxx_it.o(.text.LPUART1_IRQHandler) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[78]">LmHandlerDeviceTimeReq</a> from lmhandler.o(.text.LmHandlerDeviceTimeReq) referenced from lmhandler.o(.text.LmHandlerPackageRegister)
 <LI><a href="#[77]">LmHandlerJoin</a> from lmhandler.o(.text.LmHandlerJoin) referenced from lmhandler.o(.text.LmHandlerPackageRegister)
 <LI><a href="#[74]">LmHandlerOnPingSlotPeriodicityChanged</a> from lmhandler.o(.text.LmHandlerOnPingSlotPeriodicityChanged) referenced from lmhandler.o(.text.LmHandlerInit)
 <LI><a href="#[75]">LmHandlerOnTxFrameCtrlChanged</a> from lmhandler.o(.text.LmHandlerOnTxFrameCtrlChanged) referenced from lmhandler.o(.text.LmHandlerInit)
 <LI><a href="#[8a]">LmHandlerProcess</a> from lmhandler.o(.text.LmHandlerProcess) referenced from lora_app.o(.text.LoRaWAN_Init)
 <LI><a href="#[12]">LmhpComplianceInit</a> from lmhpcompliance.o(.text.LmhpComplianceInit) referenced 2 times from lmhpcompliance.o(.data.CompliancePackage)
 <LI><a href="#[13]">LmhpComplianceIsInitialized</a> from lmhpcompliance.o(.text.LmhpComplianceIsInitialized) referenced 2 times from lmhpcompliance.o(.data.CompliancePackage)
 <LI><a href="#[14]">LmhpComplianceIsTxPending</a> from lmhpcompliance.o(.text.LmhpComplianceIsTxPending) referenced 2 times from lmhpcompliance.o(.data.CompliancePackage)
 <LI><a href="#[16]">LmhpComplianceOnMcpsIndication</a> from lmhpcompliance.o(.text.LmhpComplianceOnMcpsIndication) referenced 2 times from lmhpcompliance.o(.data.CompliancePackage)
 <LI><a href="#[17]">LmhpComplianceOnMlmeConfirm</a> from lmhpcompliance.o(.text.LmhpComplianceOnMlmeConfirm) referenced 2 times from lmhpcompliance.o(.data.CompliancePackage)
 <LI><a href="#[18]">LmhpComplianceOnMlmeIndication</a> from lmhpcompliance.o(.text.LmhpComplianceOnMlmeIndication) referenced 2 times from lmhpcompliance.o(.data.CompliancePackage)
 <LI><a href="#[15]">LmhpComplianceProcess</a> from lmhpcompliance.o(.text.LmhpComplianceProcess) referenced 2 times from lmhpcompliance.o(.data.CompliancePackage)
 <LI><a href="#[6e]">LoRaMacMibGetRequestConfirm</a> from loramac.o(.text.LoRaMacMibGetRequestConfirm) referenced from lmhandler.o(.text.LmHandlerConfigure)
 <LI><a href="#[76]">LoRaMacMibSetRequestConfirm</a> from loramac.o(.text.LoRaMacMibSetRequestConfirm) referenced from lmhandler.o(.text.LmHandlerJoin)
 <LI><a href="#[72]">McpsConfirm</a> from lmhandler.o(.text.McpsConfirm) referenced from lmhandler.o(.text.LmHandlerInit)
 <LI><a href="#[71]">McpsIndication</a> from lmhandler.o(.text.McpsIndication) referenced from lmhandler.o(.text.LmHandlerInit)
 <LI><a href="#[1c]">MemManage_Handler</a> from stm32wlxx_it.o(.text.MemManage_Handler) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[70]">MlmeConfirm</a> from lmhandler.o(.text.MlmeConfirm) referenced from lmhandler.o(.text.LmHandlerInit)
 <LI><a href="#[6f]">MlmeIndication</a> from lmhandler.o(.text.MlmeIndication) referenced from lmhandler.o(.text.LmHandlerInit)
 <LI><a href="#[1a]">NMI_Handler</a> from stm32wlxx_it.o(.text.NMI_Handler) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[73]">NvmDataMgmtEvent</a> from nvmdatamgmt.o(.text.NvmDataMgmtEvent) referenced from lmhandler.o(.text.LmHandlerInit)
 <LI><a href="#[c]">OnBeaconStatusChange</a> from lora_app.o(.text.OnBeaconStatusChange) referenced 2 times from lora_app.o(.data..L_MergedGlobals)
 <LI><a href="#[64]">OnCertifTimer</a> from lora_at.o(.text.OnCertifTimer) referenced from lora_at.o(.text.AT_Certif)
 <LI><a href="#[b]">OnClassChange</a> from lora_app.o(.text.OnClassChange) referenced 2 times from lora_app.o(.data..L_MergedGlobals)
 <LI><a href="#[8]">OnJoinRequest</a> from lora_app.o(.text.OnJoinRequest) referenced 2 times from lora_app.o(.data..L_MergedGlobals)
 <LI><a href="#[89]">OnJoinTimerLedEvent</a> from lora_app.o(.text.OnJoinTimerLedEvent) referenced from lora_app.o(.text.LoRaWAN_Init)
 <LI><a href="#[6]">OnMacProcessNotify</a> from lora_app.o(.text.OnMacProcessNotify) referenced 2 times from lora_app.o(.data..L_MergedGlobals)
 <LI><a href="#[7]">OnNvmDataChange</a> from lora_app.o(.text.OnNvmDataChange) referenced 2 times from lora_app.o(.data..L_MergedGlobals)
 <LI><a href="#[10]">OnPingSlotPeriodicityChanged</a> from lora_app.o(.text.OnPingSlotPeriodicityChanged) referenced 2 times from lora_app.o(.data..L_MergedGlobals)
 <LI><a href="#[79]">OnProcessTimer</a> from lmhpcompliance.o(.text.OnProcessTimer) referenced from lmhpcompliance.o(.text.LmhpComplianceInit)
 <LI><a href="#[82]">OnRadioRxDone</a> from loramac.o(.text.OnRadioRxDone) referenced from loramac.o(.text.LoRaMacInitialization)
 <LI><a href="#[81]">OnRadioRxError</a> from loramac.o(.text.OnRadioRxError) referenced from loramac.o(.text.LoRaMacInitialization)
 <LI><a href="#[84]">OnRadioRxTimeout</a> from loramac.o(.text.OnRadioRxTimeout) referenced from loramac.o(.text.LoRaMacInitialization)
 <LI><a href="#[83]">OnRadioTxDone</a> from loramac.o(.text.OnRadioTxDone) referenced from loramac.o(.text.LoRaMacInitialization)
 <LI><a href="#[85]">OnRadioTxTimeout</a> from loramac.o(.text.OnRadioTxTimeout) referenced from loramac.o(.text.LoRaMacInitialization)
 <LI><a href="#[4]">OnRestoreContextRequest</a> from lora_app.o(.text.OnRestoreContextRequest) referenced 2 times from lora_app.o(.data..L_MergedGlobals)
 <LI><a href="#[80]">OnRetransmitTimeoutTimerEvent</a> from loramac.o(.text.OnRetransmitTimeoutTimerEvent) referenced from loramac.o(.text.LoRaMacInitialization)
 <LI><a href="#[a]">OnRxData</a> from lora_app.o(.text.OnRxData) referenced 2 times from lora_app.o(.data..L_MergedGlobals)
 <LI><a href="#[95]">OnRxDone</a> from test_rf.o(.text.OnRxDone) referenced from test_rf.o(.text.TST_RX_Start)
 <LI><a href="#[95]">OnRxDone</a> from test_rf.o(.text.OnRxDone) referenced from test_rf.o(.text.TST_TX_Start)
 <LI><a href="#[96]">OnRxError</a> from test_rf.o(.text.OnRxError) referenced from test_rf.o(.text.TST_RX_Start)
 <LI><a href="#[96]">OnRxError</a> from test_rf.o(.text.OnRxError) referenced from test_rf.o(.text.TST_TX_Start)
 <LI><a href="#[97]">OnRxTimeout</a> from test_rf.o(.text.OnRxTimeout) referenced from test_rf.o(.text.TST_RX_Start)
 <LI><a href="#[97]">OnRxTimeout</a> from test_rf.o(.text.OnRxTimeout) referenced from test_rf.o(.text.TST_TX_Start)
 <LI><a href="#[88]">OnRxTimerLedEvent</a> from lora_app.o(.text.OnRxTimerLedEvent) referenced from lora_app.o(.text.LoRaWAN_Init)
 <LI><a href="#[7e]">OnRxWindow1TimerEvent</a> from loramac.o(.text.OnRxWindow1TimerEvent) referenced from loramac.o(.text.LoRaMacInitialization)
 <LI><a href="#[7f]">OnRxWindow2TimerEvent</a> from loramac.o(.text.OnRxWindow2TimerEvent) referenced from loramac.o(.text.LoRaMacInitialization)
 <LI><a href="#[5]">OnStoreContextRequest</a> from lora_app.o(.text.OnStoreContextRequest) referenced 2 times from lora_app.o(.data..L_MergedGlobals)
 <LI><a href="#[d]">OnSysTimeUpdate</a> from lora_app.o(.text.OnSysTimeUpdate) referenced 2 times from lora_app.o(.data..L_MergedGlobals)
 <LI><a href="#[11]">OnSystemReset</a> from lora_app.o(.text.OnSystemReset) referenced 2 times from lora_app.o(.data..L_MergedGlobals)
 <LI><a href="#[9]">OnTxData</a> from lora_app.o(.text.OnTxData) referenced 2 times from lora_app.o(.data..L_MergedGlobals)
 <LI><a href="#[7c]">OnTxDelayedTimerEvent</a> from loramac.o(.text.OnTxDelayedTimerEvent) referenced from loramac.o(.text.LoRaMacInitialization)
 <LI><a href="#[99]">OnTxDone</a> from test_rf.o(.text.OnTxDone) referenced from test_rf.o(.text.TST_RX_Start)
 <LI><a href="#[99]">OnTxDone</a> from test_rf.o(.text.OnTxDone) referenced from test_rf.o(.text.TST_TX_Start)
 <LI><a href="#[f]">OnTxFrameCtrlChanged</a> from lora_app.o(.text.OnTxFrameCtrlChanged) referenced 2 times from lora_app.o(.data..L_MergedGlobals)
 <LI><a href="#[e]">OnTxPeriodicityChanged</a> from lora_app.o(.text.OnTxPeriodicityChanged) referenced 2 times from lora_app.o(.data..L_MergedGlobals)
 <LI><a href="#[98]">OnTxTimeout</a> from test_rf.o(.text.OnTxTimeout) referenced from test_rf.o(.text.TST_RX_Start)
 <LI><a href="#[98]">OnTxTimeout</a> from test_rf.o(.text.OnTxTimeout) referenced from test_rf.o(.text.TST_TX_Start)
 <LI><a href="#[87]">OnTxTimerLedEvent</a> from lora_app.o(.text.OnTxTimerLedEvent) referenced from lora_app.o(.text.LoRaWAN_Init)
 <LI><a href="#[58]">PKA_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[24]">PVD_PVM_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[105]">PWR_EnterOffMode</a> from stm32_lpm_if.o(.text.PWR_EnterOffMode) referenced from stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
 <LI><a href="#[101]">PWR_EnterSleepMode</a> from stm32_lpm_if.o(.text.PWR_EnterSleepMode) referenced from stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
 <LI><a href="#[103]">PWR_EnterStopMode</a> from stm32_lpm_if.o(.text.PWR_EnterStopMode) referenced from stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
 <LI><a href="#[106]">PWR_ExitOffMode</a> from stm32_lpm_if.o(.text.PWR_ExitOffMode) referenced from stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
 <LI><a href="#[102]">PWR_ExitSleepMode</a> from stm32_lpm_if.o(.text.PWR_ExitSleepMode) referenced from stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
 <LI><a href="#[104]">PWR_ExitStopMode</a> from stm32_lpm_if.o(.text.PWR_ExitStopMode) referenced from stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
 <LI><a href="#[21]">PendSV_Handler</a> from stm32wlxx_it.o(.text.PendSV_Handler) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[93]">PrintKey</a> from soft-se.o(.text.PrintKey) referenced from soft-se.o(.text.SecureElementPrintSessionKeys)
 <LI><a href="#[28]">RCC_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[fe]">RFW_ReceiveLongPacket</a> from radio_fw.o(.text.RFW_ReceiveLongPacket) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[fd]">RFW_TransmitLongPacket</a> from radio_fw.o(.text.RFW_TransmitLongPacket) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[57]">RNG_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[4d]">RTC_Alarm_IRQHandler</a> from stm32wlxx_it.o(.text.RTC_Alarm_IRQHandler) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[68]">RTC_ByteToBcd2</a> from stm32wlxx_hal_rtc.o(.text.RTC_ByteToBcd2) referenced from stm32wlxx_hal_rtc.o(.text.HAL_RTC_SetAlarm_IT)
 <LI><a href="#[26]">RTC_WKUP_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[e6]">RadioCheckRfFrequency</a> from radio.o(.text.RadioCheckRfFrequency) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[df]">RadioGetStatus</a> from radio.o(.text.RadioGetStatus) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[f5]">RadioGetWakeupTime</a> from radio.o(.text.RadioGetWakeupTime) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[de]">RadioInit</a> from radio.o(.text.RadioInit) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[f6]">RadioIrqProcess</a> from radio.o(.text.RadioIrqProcess) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[e2]">RadioIsChannelFree</a> from radio.o(.text.RadioIsChannelFree) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[100]">RadioLrFhssGetTimeOnAirInMs</a> from radio.o(.text.RadioLrFhssGetTimeOnAirInMs) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[ff]">RadioLrFhssSetCfg</a> from radio.o(.text.RadioLrFhssSetCfg) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[8e]">RadioOnDioIrq</a> from radio.o(.text.RadioOnDioIrq) referenced from radio.o(.text.RadioInit)
 <LI><a href="#[90]">RadioOnRxTimeoutIrq</a> from radio.o(.text.RadioOnRxTimeoutIrq) referenced from radio.o(.text.RadioInit)
 <LI><a href="#[8f]">RadioOnTxTimeoutIrq</a> from radio.o(.text.RadioOnTxTimeoutIrq) referenced from radio.o(.text.RadioInit)
 <LI><a href="#[e3]">RadioRandom</a> from radio.o(.text.RadioRandom) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[f0]">RadioRead</a> from radio.o(.text.RadioRead) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[f2]">RadioReadRegisters</a> from radio.o(.text.RadioReadRegisters) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[ee]">RadioRssi</a> from radio.o(.text.RadioRssi) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[eb]">RadioRx</a> from radio.o(.text.RadioRx) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[f7]">RadioRxBoosted</a> from radio.o(.text.RadioRxBoosted) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[e8]">RadioSend</a> from radio.o(.text.RadioSend) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[e1]">RadioSetChannel</a> from radio.o(.text.RadioSetChannel) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[f3]">RadioSetMaxPayloadLength</a> from radio.o(.text.RadioSetMaxPayloadLength) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[e0]">RadioSetModem</a> from radio.o(.text.RadioSetModem) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[f4]">RadioSetPublicNetwork</a> from radio.o(.text.RadioSetPublicNetwork) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[e4]">RadioSetRxConfig</a> from radio.o(.text.RadioSetRxConfig) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[f8]">RadioSetRxDutyCycle</a> from radio.o(.text.RadioSetRxDutyCycle) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[fb]">RadioSetRxGenericConfig</a> from radio.o(.text.RadioSetRxGenericConfig) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[e5]">RadioSetTxConfig</a> from radio.o(.text.RadioSetTxConfig) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[ed]">RadioSetTxContinuousWave</a> from radio.o(.text.RadioSetTxContinuousWave) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[fc]">RadioSetTxGenericConfig</a> from radio.o(.text.RadioSetTxGenericConfig) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[e9]">RadioSleep</a> from radio.o(.text.RadioSleep) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[ea]">RadioStandby</a> from radio.o(.text.RadioStandby) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[ec]">RadioStartCad</a> from radio.o(.text.RadioStartCad) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[e7]">RadioTimeOnAir</a> from radio.o(.text.RadioTimeOnAir) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[fa]">RadioTxCw</a> from radio.o(.text.RadioTxCw) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[f9]">RadioTxPrbs</a> from radio.o(.text.RadioTxPrbs) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[ef]">RadioWrite</a> from radio.o(.text.RadioWrite) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[f1]">RadioWriteRegisters</a> from radio.o(.text.RadioWriteRegisters) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[7b]">RegionGetPhyParam</a> from region.o(.text.RegionGetPhyParam) referenced from loramac.o(.text.LoRaMacInitialization)
 <LI><a href="#[19]">Reset_Handler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[45]">SPI1_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[46]">SPI2_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[4f]">SUBGHZSPI_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[69]">SUBGHZSPI_Transmit</a> from stm32wlxx_hal_subghz.o(.text.SUBGHZSPI_Transmit) referenced from stm32wlxx_hal_subghz.o(.text.HAL_SUBGHZ_WriteRegisters)
 <LI><a href="#[55]">SUBGHZ_Radio_IRQHandler</a> from stm32wlxx_it.o(.text.SUBGHZ_Radio_IRQHandler) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[92]">SUBGRF_ReadRegister</a> from radio_driver.o(.text.SUBGRF_ReadRegister) referenced from radio_driver.o(.text.SUBGRF_GetCFO)
 <LI><a href="#[91]">SUBGRF_WriteRegister</a> from radio_driver.o(.text.SUBGRF_WriteRegister) referenced from radio.o(.text.RadioIrqProcess)
 <LI><a href="#[91]">SUBGRF_WriteRegister</a> from radio_driver.o(.text.SUBGRF_WriteRegister) referenced from radio_driver.o(.text.SUBGRF_GetRandom)
 <LI><a href="#[1f]">SVC_Handler</a> from stm32wlxx_it.o(.text.SVC_Handler) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[22]">SysTick_Handler</a> from stm32wlxx_it.o(.text.SysTick_Handler) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[62]">SystemInit</a> from system_stm32wlxx.o(.text.SystemInit) referenced from startup_stm32wl55xx_cm4.o(.text)
 <LI><a href="#[25]">TAMP_STAMP_LSECSS_SSRU_IRQHandler</a> from stm32wlxx_it.o(.text.TAMP_STAMP_LSECSS_SSRU_IRQHandler) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[3f]">TIM16_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[40]">TIM17_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[3a]">TIM1_BRK_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[3d]">TIM1_CC_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[3c]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[3b]">TIM1_UP_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[3e]">TIM2_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[108]">TIMER_IF_BkUp_Read_Seconds</a> from timer_if.o(.text.TIMER_IF_BkUp_Read_Seconds) referenced from timer_if.o(.rodata.UTIL_SYSTIMDriver)
 <LI><a href="#[10a]">TIMER_IF_BkUp_Read_SubSeconds</a> from timer_if.o(.text.TIMER_IF_BkUp_Read_SubSeconds) referenced from timer_if.o(.rodata.UTIL_SYSTIMDriver)
 <LI><a href="#[107]">TIMER_IF_BkUp_Write_Seconds</a> from timer_if.o(.text.TIMER_IF_BkUp_Write_Seconds) referenced from timer_if.o(.rodata.UTIL_SYSTIMDriver)
 <LI><a href="#[109]">TIMER_IF_BkUp_Write_SubSeconds</a> from timer_if.o(.text.TIMER_IF_BkUp_Write_SubSeconds) referenced from timer_if.o(.rodata.UTIL_SYSTIMDriver)
 <LI><a href="#[115]">TIMER_IF_Convert_Tick2ms</a> from timer_if.o(.text.TIMER_IF_Convert_Tick2ms) referenced from timer_if.o(.rodata.UTIL_TimerDriver)
 <LI><a href="#[114]">TIMER_IF_Convert_ms2Tick</a> from timer_if.o(.text.TIMER_IF_Convert_ms2Tick) referenced from timer_if.o(.rodata.UTIL_TimerDriver)
 <LI><a href="#[113]">TIMER_IF_GetMinimumTimeout</a> from timer_if.o(.text.TIMER_IF_GetMinimumTimeout) referenced from timer_if.o(.rodata.UTIL_TimerDriver)
 <LI><a href="#[10b]">TIMER_IF_GetTime</a> from timer_if.o(.text.TIMER_IF_GetTime) referenced from timer_if.o(.rodata.UTIL_SYSTIMDriver)
 <LI><a href="#[110]">TIMER_IF_GetTimerContext</a> from timer_if.o(.text.TIMER_IF_GetTimerContext) referenced from timer_if.o(.rodata.UTIL_TimerDriver)
 <LI><a href="#[111]">TIMER_IF_GetTimerElapsedTime</a> from timer_if.o(.text.TIMER_IF_GetTimerElapsedTime) referenced from timer_if.o(.rodata.UTIL_TimerDriver)
 <LI><a href="#[112]">TIMER_IF_GetTimerValue</a> from timer_if.o(.text.TIMER_IF_GetTimerValue) referenced from timer_if.o(.rodata.UTIL_TimerDriver)
 <LI><a href="#[10c]">TIMER_IF_Init</a> from timer_if.o(.text.TIMER_IF_Init) referenced from timer_if.o(.rodata.UTIL_TimerDriver)
 <LI><a href="#[10f]">TIMER_IF_SetTimerContext</a> from timer_if.o(.text.TIMER_IF_SetTimerContext) referenced from timer_if.o(.rodata.UTIL_TimerDriver)
 <LI><a href="#[10d]">TIMER_IF_StartTimer</a> from timer_if.o(.text.TIMER_IF_StartTimer) referenced from timer_if.o(.rodata.UTIL_TimerDriver)
 <LI><a href="#[10e]">TIMER_IF_StopTimer</a> from timer_if.o(.text.TIMER_IF_StopTimer) referenced from timer_if.o(.rodata.UTIL_TimerDriver)
 <LI><a href="#[9e]">TRACE_TxCpltCallback</a> from stm32_adv_trace.o(.text.TRACE_TxCpltCallback) referenced from stm32_adv_trace.o(.text.UTIL_ADV_TRACE_Init)
 <LI><a href="#[94]">TimestampNow</a> from sys_app.o(.text.TimestampNow) referenced from sys_app.o(.text.SystemApp_Init)
 <LI><a href="#[6a]">UART_DMAAbortOnError</a> from stm32wlxx_hal_uart.o(.text.UART_DMAAbortOnError) referenced from stm32wlxx_hal_uart.o(.text.HAL_UART_IRQHandler)
 <LI><a href="#[6b]">UART_DMAError</a> from stm32wlxx_hal_uart.o(.text.UART_DMAError) referenced from stm32wlxx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
 <LI><a href="#[6d]">UART_DMATransmitCplt</a> from stm32wlxx_hal_uart.o(.text.UART_DMATransmitCplt) referenced from stm32wlxx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
 <LI><a href="#[6c]">UART_DMATxHalfCplt</a> from stm32wlxx_hal_uart.o(.text.UART_DMATxHalfCplt) referenced from stm32wlxx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
 <LI><a href="#[9a]">UART_RxISR_16BIT</a> from stm32wlxx_hal_uart.o(.text.UART_RxISR_16BIT) referenced from stm32wlxx_hal_uart.o(.text.UART_RxISR_16BIT_FIFOEN)
 <LI><a href="#[9a]">UART_RxISR_16BIT</a> from stm32wlxx_hal_uart.o(.text.UART_RxISR_16BIT) referenced from stm32wlxx_hal_uart.o(.text.UART_Start_Receive_IT)
 <LI><a href="#[9c]">UART_RxISR_16BIT_FIFOEN</a> from stm32wlxx_hal_uart.o(.text.UART_RxISR_16BIT_FIFOEN) referenced from stm32wlxx_hal_uart.o(.text.UART_Start_Receive_IT)
 <LI><a href="#[9d]">UART_RxISR_8BIT</a> from stm32wlxx_hal_uart.o(.text.UART_RxISR_8BIT) referenced from stm32wlxx_hal_uart.o(.text.UART_Start_Receive_IT)
 <LI><a href="#[9b]">UART_RxISR_8BIT_FIFOEN</a> from stm32wlxx_hal_uart.o(.text.UART_RxISR_8BIT_FIFOEN) referenced from stm32wlxx_hal_uart.o(.text.UART_Start_Receive_IT)
 <LI><a href="#[47]">USART1_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[48]">USART2_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[66]">UTIL_ADV_TRACE_COND_FSend</a> from stm32_adv_trace.o(.text.UTIL_ADV_TRACE_COND_FSend) referenced from lora_at.o(.text.AT_test_get_config)
 <LI><a href="#[66]">UTIL_ADV_TRACE_COND_FSend</a> from stm32_adv_trace.o(.text.UTIL_ADV_TRACE_COND_FSend) referenced from lora_at.o(.text.AT_version_get)
 <LI><a href="#[66]">UTIL_ADV_TRACE_COND_FSend</a> from stm32_adv_trace.o(.text.UTIL_ADV_TRACE_COND_FSend) referenced from lora_app.o(.text.LoRaWAN_Init)
 <LI><a href="#[66]">UTIL_ADV_TRACE_COND_FSend</a> from stm32_adv_trace.o(.text.UTIL_ADV_TRACE_COND_FSend) referenced from soft-se.o(.text.PrintIds)
 <LI><a href="#[7d]">UTIL_TIMER_Create</a> from stm32_timer.o(.text.UTIL_TIMER_Create) referenced from loramac.o(.text.LoRaMacInitialization)
 <LI><a href="#[7d]">UTIL_TIMER_Create</a> from stm32_timer.o(.text.UTIL_TIMER_Create) referenced from lora_app.o(.text.LoRaWAN_Init)
 <LI><a href="#[7a]">UTIL_TIMER_Stop</a> from stm32_timer.o(.text.UTIL_TIMER_Stop) referenced from loramac.o(.text.LoRaMacHalt)
 <LI><a href="#[1e]">UsageFault_Handler</a> from stm32wlxx_it.o(.text.UsageFault_Handler) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[23]">WWDG_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[63]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32wl55xx_cm4.o(.text)
 <LI><a href="#[61]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[117]">vcom_DeInit</a> from usart_if.o(.text.vcom_DeInit) referenced from usart_if.o(.rodata.UTIL_TraceDriver)
 <LI><a href="#[116]">vcom_Init</a> from usart_if.o(.text.vcom_Init) referenced from usart_if.o(.rodata.UTIL_TraceDriver)
 <LI><a href="#[118]">vcom_ReceiveInit</a> from usart_if.o(.text.vcom_ReceiveInit) referenced from usart_if.o(.rodata.UTIL_TraceDriver)
 <LI><a href="#[119]">vcom_Trace_DMA</a> from usart_if.o(.text.vcom_Trace_DMA) referenced from usart_if.o(.rodata.UTIL_TraceDriver)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[63]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(.text)
</UL>
<P><STRONG><a name="[369]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[11a]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[128]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[36a]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[36b]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[36c]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[36d]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[36e]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[19]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>C2SEV_PWR_C2H_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>HSEM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>IPCC_C1_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>IPCC_C1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>LPTIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>PKA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>SUBGHZSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[11c]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_Convert_ms2Tick
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_DelayMs
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRfFrequency
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetModulationParams
</UL>

<P><STRONG><a name="[120]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[24f]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoInit
</UL>

<P><STRONG><a name="[36f]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[182]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_StartTimer
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_RX_Start
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_set_config
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915NextChannel
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868InitDefaults
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
</UL>

<P><STRONG><a name="[370]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[121]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[16c]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_vsnprintf_like
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimestampNow
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Send
</UL>

<P><STRONG><a name="[192]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Process
</UL>

<P><STRONG><a name="[122]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floorf
</UL>

<P><STRONG><a name="[125]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>

<P><STRONG><a name="[126]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[127]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[2fa]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>

<P><STRONG><a name="[11e]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[371]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[372]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[373]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[124]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[123]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[11b]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[374]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[375]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[376]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[129]"></a>ADC_ConversionStop</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32wlxx_hal_adc.o(.text.ADC_ConversionStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_ConversionStop
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_DeInit
</UL>

<P><STRONG><a name="[12b]"></a>ADC_Disable</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32wlxx_hal_adc.o(.text.ADC_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_DeInit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
</UL>

<P><STRONG><a name="[12c]"></a>ADC_Enable</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, stm32wlxx_hal_adc.o(.text.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
</UL>

<P><STRONG><a name="[137]"></a>AES_CMAC_Final</STRONG> (Thumb, 318 bytes, Stack size 56 bytes, cmac.o(.text.AES_CMAC_Final))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_aes_encrypt
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCmac
</UL>

<P><STRONG><a name="[13b]"></a>AES_CMAC_Init</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, cmac.o(.text.AES_CMAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AES_CMAC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCmac
</UL>

<P><STRONG><a name="[13c]"></a>AES_CMAC_SetKey</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cmac.o(.text.AES_CMAC_SetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AES_CMAC_SetKey &rArr; lorawan_aes_set_key
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_aes_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCmac
</UL>

<P><STRONG><a name="[13e]"></a>AES_CMAC_Update</STRONG> (Thumb, 220 bytes, Stack size 48 bytes, cmac.o(.text.AES_CMAC_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = AES_CMAC_Update &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCmac
</UL>

<P><STRONG><a name="[ba]"></a>AT_ADR_get</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lora_at.o(.text.AT_ADR_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = AT_ADR_get &rArr; print_d &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetAdrEnable
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[bb]"></a>AT_ADR_set</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lora_at.o(.text.AT_ADR_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = AT_ADR_set &rArr; LmHandlerSetAdrEnable &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveLifeTimeKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetAdrEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[ab]"></a>AT_AppKey_get</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, lora_at.o(.text.AT_AppKey_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = AT_AppKey_get &rArr; print_16_02x &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetKey
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_16_02x
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[ac]"></a>AT_AppKey_set</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lora_at.o(.text.AT_AppKey_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = AT_AppKey_set &rArr; LmHandlerSetKey &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveLifeTimeKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetKey
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf_16_hhx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[af]"></a>AT_AppSKey_get</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, lora_at.o(.text.AT_AppSKey_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = AT_AppSKey_get &rArr; print_16_02x &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetKey
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_16_02x
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[b0]"></a>AT_AppSKey_set</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lora_at.o(.text.AT_AppSKey_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = AT_AppSKey_set &rArr; LmHandlerSetKey &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveLifeTimeKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetKey
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf_16_hhx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[dc]"></a>AT_Certif</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lora_at.o(.text.AT_Certif))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = AT_Certif &rArr; LmHandlerJoin &rArr; LoRaMacMlmeRequest &rArr; ScheduleTx &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoin
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Create
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_RegTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[bc]"></a>AT_DataRate_get</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lora_at.o(.text.AT_DataRate_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = AT_DataRate_get &rArr; print_d &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetTxDatarate
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[bd]"></a>AT_DataRate_set</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lora_at.o(.text.AT_DataRate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = AT_DataRate_set &rArr; LmHandlerSetTxDatarate &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveLifeTimeKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetTxDatarate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[b1]"></a>AT_DevAddr_get</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, lora_at.o(.text.AT_DevAddr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = AT_DevAddr_get &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetDevAddr
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[b2]"></a>AT_DevAddr_set</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, lora_at.o(.text.AT_DevAddr_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = AT_DevAddr_set &rArr; LmHandlerSetDevAddr &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveLifeTimeKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetDevAddr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[b3]"></a>AT_DevEUI_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lora_at.o(.text.AT_DevEUI_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = AT_DevEUI_get &rArr; print_8_02x &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetDevEUI
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_8_02x
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[b4]"></a>AT_DevEUI_set</STRONG> (Thumb, 64 bytes, Stack size 56 bytes, lora_at.o(.text.AT_DevEUI_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = AT_DevEUI_set &rArr; LmHandlerSetDevEUI &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveLifeTimeKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetDevEUI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[c0]"></a>AT_DeviceClass_get</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, lora_at.o(.text.AT_DeviceClass_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = AT_DeviceClass_get &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraInfo_GetPtr
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetCurrentClass
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetBeaconState
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[c1]"></a>AT_DeviceClass_set</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, lora_at.o(.text.AT_DeviceClass_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = AT_DeviceClass_set &rArr; LmHandlerRequestClass &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveLifeTimeKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraInfo_GetPtr
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerRequestClass
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[c2]"></a>AT_DutyCycle_get</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lora_at.o(.text.AT_DutyCycle_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = AT_DutyCycle_get &rArr; print_d &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetDutyCycleEnable
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[c3]"></a>AT_DutyCycle_set</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lora_at.o(.text.AT_DutyCycle_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AT_DutyCycle_set &rArr; LmHandlerSetDutyCycleEnable &rArr; LoRaMacTestSetDutyCycleOn &rArr; RegionVerify &rArr; RegionEU868Verify &rArr; VerifyRfFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetDutyCycleEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[b7]"></a>AT_Join</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lora_at.o(.text.AT_Join))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = AT_Join &rArr; LmHandlerJoin &rArr; LoRaMacMlmeRequest &rArr; ScheduleTx &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[c4]"></a>AT_JoinAcceptDelay1_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lora_at.o(.text.AT_JoinAcceptDelay1_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = AT_JoinAcceptDelay1_get &rArr; print_u &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetJoinRx1Delay
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_u
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[c5]"></a>AT_JoinAcceptDelay1_set</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lora_at.o(.text.AT_JoinAcceptDelay1_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = AT_JoinAcceptDelay1_set &rArr; LmHandlerSetJoinRx1Delay &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveLifeTimeKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetJoinRx1Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[c6]"></a>AT_JoinAcceptDelay2_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lora_at.o(.text.AT_JoinAcceptDelay2_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = AT_JoinAcceptDelay2_get &rArr; print_u &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetJoinRx2Delay
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_u
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[c7]"></a>AT_JoinAcceptDelay2_set</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lora_at.o(.text.AT_JoinAcceptDelay2_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = AT_JoinAcceptDelay2_set &rArr; LmHandlerSetJoinRx2Delay &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveLifeTimeKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetJoinRx2Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[a7]"></a>AT_JoinEUI_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lora_at.o(.text.AT_JoinEUI_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = AT_JoinEUI_get &rArr; print_8_02x &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetAppEUI
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_8_02x
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[a8]"></a>AT_JoinEUI_set</STRONG> (Thumb, 68 bytes, Stack size 56 bytes, lora_at.o(.text.AT_JoinEUI_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = AT_JoinEUI_set &rArr; LmHandlerSetAppEUI &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveLifeTimeKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetAppEUI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[b8]"></a>AT_Link_Check</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lora_at.o(.text.AT_Link_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = AT_Link_Check &rArr; LmHandlerLinkCheckReq &rArr; LoRaMacMlmeRequest &rArr; ScheduleTx &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerLinkCheckReq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[a3]"></a>AT_LocalTime_get</STRONG> (Thumb, 108 bytes, Stack size 96 bytes, lora_at.o(.text.AT_LocalTime_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = AT_LocalTime_get &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGet
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeLocalTime
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[b5]"></a>AT_NetworkID_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lora_at.o(.text.AT_NetworkID_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = AT_NetworkID_get &rArr; print_d &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetNetworkID
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[b6]"></a>AT_NetworkID_set</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lora_at.o(.text.AT_NetworkID_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = AT_NetworkID_set &rArr; LmHandlerSetNetworkID &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveLifeTimeKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetNetworkID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[a9]"></a>AT_NwkKey_get</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, lora_at.o(.text.AT_NwkKey_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = AT_NwkKey_get &rArr; print_16_02x &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetKey
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_16_02x
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[aa]"></a>AT_NwkKey_set</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lora_at.o(.text.AT_NwkKey_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = AT_NwkKey_set &rArr; LmHandlerSetKey &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveLifeTimeKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetKey
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf_16_hhx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[ad]"></a>AT_NwkSKey_get</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, lora_at.o(.text.AT_NwkSKey_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = AT_NwkSKey_get &rArr; print_16_02x &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetKey
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_16_02x
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[ae]"></a>AT_NwkSKey_set</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lora_at.o(.text.AT_NwkSKey_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = AT_NwkSKey_set &rArr; LmHandlerSetKey &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveLifeTimeKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetKey
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf_16_hhx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[d2]"></a>AT_PingSlot_get</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lora_at.o(.text.AT_PingSlot_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = AT_PingSlot_get &rArr; print_d &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetPingPeriodicity
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[d3]"></a>AT_PingSlot_set</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lora_at.o(.text.AT_PingSlot_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = AT_PingSlot_set &rArr; tiny_sscanf
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetPingPeriodicity
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[be]"></a>AT_Region_get</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, lora_at.o(.text.AT_Region_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = AT_Region_get &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetActiveRegion
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[bf]"></a>AT_Region_set</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lora_at.o(.text.AT_Region_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = AT_Region_set &rArr; LmHandlerSetActiveRegion &rArr; LmHandlerConfigure &rArr; LmHandlerSetSystemMaxRxError &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveLifeTimeKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetActiveRegion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[c8]"></a>AT_Rx1Delay_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lora_at.o(.text.AT_Rx1Delay_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = AT_Rx1Delay_get &rArr; print_u &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetRx1Delay
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_u
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[c9]"></a>AT_Rx1Delay_set</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lora_at.o(.text.AT_Rx1Delay_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = AT_Rx1Delay_set &rArr; LmHandlerSetRx1Delay &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveLifeTimeKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetRx1Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[cc]"></a>AT_Rx2DataRate_get</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lora_at.o(.text.AT_Rx2DataRate_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = AT_Rx2DataRate_get &rArr; print_d &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetRX2Params
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[cd]"></a>AT_Rx2DataRate_set</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lora_at.o(.text.AT_Rx2DataRate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = AT_Rx2DataRate_set &rArr; LmHandlerSetRX2Params &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveLifeTimeKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetRX2Params
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetRX2Params
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[ca]"></a>AT_Rx2Delay_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lora_at.o(.text.AT_Rx2Delay_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = AT_Rx2Delay_get &rArr; print_u &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetRx2Delay
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_u
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[cb]"></a>AT_Rx2Delay_set</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lora_at.o(.text.AT_Rx2Delay_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = AT_Rx2Delay_set &rArr; LmHandlerSetRx2Delay &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveLifeTimeKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetRx2Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[ce]"></a>AT_Rx2Frequency_get</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lora_at.o(.text.AT_Rx2Frequency_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = AT_Rx2Frequency_get &rArr; print_d &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetRX2Params
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[cf]"></a>AT_Rx2Frequency_set</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lora_at.o(.text.AT_Rx2Frequency_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = AT_Rx2Frequency_set &rArr; LmHandlerSetRX2Params &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveLifeTimeKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetRX2Params
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetRX2Params
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[b9]"></a>AT_Send</STRONG> (Thumb, 432 bytes, Stack size 40 bytes, lora_at.o(.text.AT_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = AT_Send &rArr; LmHandlerSend &rArr; LmHandlerJoin &rArr; LoRaMacMlmeRequest &rArr; ScheduleTx &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSend
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoinStatus
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[d0]"></a>AT_TransmitPower_get</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lora_at.o(.text.AT_TransmitPower_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = AT_TransmitPower_get &rArr; print_d &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetTxPower
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[d1]"></a>AT_TransmitPower_set</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lora_at.o(.text.AT_TransmitPower_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = AT_TransmitPower_set &rArr; LmHandlerSetTxPower &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveLifeTimeKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetTxPower
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[dd]"></a>AT_bat_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lora_at.o(.text.AT_bat_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = AT_bat_get &rArr; print_d &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetBatteryLevel
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[172]"></a>AT_event_Beacon</STRONG> (Thumb, 164 bytes, Stack size 80 bytes, lora_at.o(.text.AT_event_Beacon))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = AT_event_Beacon &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnBeaconStatusChange
</UL>

<P><STRONG><a name="[173]"></a>AT_event_ClassUpdate</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lora_at.o(.text.AT_event_ClassUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = AT_event_ClassUpdate &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnClassChange
</UL>

<P><STRONG><a name="[174]"></a>AT_event_OnNvmDataChange</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, lora_at.o(.text.AT_event_OnNvmDataChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = AT_event_OnNvmDataChange &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnNvmDataChange
</UL>

<P><STRONG><a name="[175]"></a>AT_event_OnRestoreContextRequest</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lora_at.o(.text.AT_event_OnRestoreContextRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AT_event_OnRestoreContextRequest &rArr; FLASH_IF_Read &rArr; FLASH_IF_INT_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IF_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRestoreContextRequest
</UL>

<P><STRONG><a name="[177]"></a>AT_event_OnStoreContextRequest</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lora_at.o(.text.AT_event_OnStoreContextRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = AT_event_OnStoreContextRequest &rArr; FLASH_IF_Write &rArr; FLASH_IF_INT_Erase &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IF_Write
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IF_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnStoreContextRequest
</UL>

<P><STRONG><a name="[17a]"></a>AT_event_confirm</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lora_at.o(.text.AT_event_confirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = AT_event_confirm &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxData
</UL>

<P><STRONG><a name="[17b]"></a>AT_event_join</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, lora_at.o(.text.AT_event_join))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = AT_event_join &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnJoinRequest
</UL>

<P><STRONG><a name="[17c]"></a>AT_event_receive</STRONG> (Thumb, 320 bytes, Stack size 48 bytes, lora_at.o(.text.AT_event_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = AT_event_receive &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxData
</UL>

<P><STRONG><a name="[a4]"></a>AT_reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lora_at.o(.text.AT_reset))
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[a5]"></a>AT_restore_factory_settings</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lora_at.o(.text.AT_restore_factory_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = AT_restore_factory_settings &rArr; FLASH_IF_Erase &rArr; FLASH_IF_INT_Erase &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IF_Erase
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[a0]"></a>AT_return_error</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lora_at.o(.text.AT_return_error))
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[a6]"></a>AT_store_context</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, lora_at.o(.text.AT_store_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = AT_store_context &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerNvmDataStore
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[d6]"></a>AT_test_get_config</STRONG> (Thumb, 592 bytes, Stack size 64 bytes, lora_at.o(.text.AT_test_get_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = AT_test_get_config &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_get_config
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[d9]"></a>AT_test_rx</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, lora_at.o(.text.AT_test_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = AT_test_rx &rArr; TST_RX_Start &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_RX_Start
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[d5]"></a>AT_test_rxRssi</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lora_at.o(.text.AT_test_rxRssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = AT_test_rxRssi &rArr; TST_RxRssi &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_RxRssi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[d7]"></a>AT_test_set_config</STRONG> (Thumb, 412 bytes, Stack size 168 bytes, lora_at.o(.text.AT_test_set_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = AT_test_set_config &rArr; tiny_sscanf
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_set_config
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_get_config
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[db]"></a>AT_test_stop</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lora_at.o(.text.AT_test_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = AT_test_stop &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_stop
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[d8]"></a>AT_test_tx</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lora_at.o(.text.AT_test_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = AT_test_tx &rArr; TST_TX_Start &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_TX_Start
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[d4]"></a>AT_test_txTone</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lora_at.o(.text.AT_test_txTone))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = AT_test_txTone &rArr; TST_TxTone &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_TxTone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[da]"></a>AT_test_tx_hopping</STRONG> (Thumb, 184 bytes, Stack size 96 bytes, lora_at.o(.text.AT_test_tx_hopping))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = AT_test_tx_hopping &rArr; TST_TX_Start &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_set_config
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_get_config
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_TX_Start
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[a1]"></a>AT_verbose_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lora_at.o(.text.AT_verbose_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = AT_verbose_get &rArr; print_u &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_GetVerboseLevel
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_u
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[a2]"></a>AT_verbose_set</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lora_at.o(.text.AT_verbose_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = AT_verbose_set &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_SetVerboseLevel
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[9f]"></a>AT_version_get</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, lora_at.o(.text.AT_version_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AT_version_get
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetVersion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[18a]"></a>BSP_RADIO_ConfigRFSwitch</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32wlxx_nucleo_radio.o(.text.BSP_RADIO_ConfigRFSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_RADIO_ConfigRFSwitch
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBI_ConfigRFSwitch
</UL>

<P><STRONG><a name="[2b5]"></a>BSP_RADIO_GetRFOMaxPowerConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wlxx_nucleo_radio.o(.text.BSP_RADIO_GetRFOMaxPowerConfig))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBI_GetRFOMaxPowerConfig
</UL>

<P><STRONG><a name="[2b7]"></a>BSP_RADIO_GetTxConfig</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32wlxx_nucleo_radio.o(.text.BSP_RADIO_GetTxConfig))
<BR><BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBI_GetTxConfig
</UL>

<P><STRONG><a name="[18c]"></a>BSP_RADIO_Init</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, stm32wlxx_nucleo_radio.o(.text.BSP_RADIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BSP_RADIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBI_Init
</UL>

<P><STRONG><a name="[2ba]"></a>BSP_RADIO_IsDCDC</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32wlxx_nucleo_radio.o(.text.BSP_RADIO_IsDCDC))
<BR><BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBI_IsDCDC
</UL>

<P><STRONG><a name="[2bc]"></a>BSP_RADIO_IsTCXO</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32wlxx_nucleo_radio.o(.text.BSP_RADIO_IsTCXO))
<BR><BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBI_IsTCXO
</UL>

<P><STRONG><a name="[1d]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[18e]"></a>CMD_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lora_command.o(.text.CMD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CMD_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_StartRxProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaWAN_Init
</UL>

<P><STRONG><a name="[8b]"></a>CMD_Process</STRONG> (Thumb, 588 bytes, Stack size 40 bytes, lora_command.o(.text.CMD_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = CMD_Process &rArr; com_error &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_IsBufferEmpty
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_error
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.text.LoRaWAN_Init)
</UL>
<P><STRONG><a name="[25e]"></a>Crc32</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, utilities.o(.text.Crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleNvm
</UL>

<P><STRONG><a name="[196]"></a>DBG_Init</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, sys_debug.o(.text.DBG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DBG_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DBGMCU_DisableDBGStopMode
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DBGMCU_DisableDBGStandbyMode
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DBGMCU_DisableDBGSleepMode
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemApp_Init
</UL>

<P><STRONG><a name="[32]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wlxx_it.o(.text.DMA1_Channel5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DMA1_Channel5_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[130]"></a>Error_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Resume
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ReadChannels
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_StartTimer
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaWAN_Init
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SUBGHZ_Init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[178]"></a>FLASH_IF_Erase</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, flash_if.o(.text.FLASH_IF_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FLASH_IF_Erase &rArr; FLASH_IF_INT_Erase &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IF_INT_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_restore_factory_settings
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_event_OnStoreContextRequest
</UL>

<P><STRONG><a name="[28b]"></a>FLASH_IF_Init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, flash_if.o(.text.FLASH_IF_Init))
<BR><BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaWAN_Init
</UL>

<P><STRONG><a name="[176]"></a>FLASH_IF_Read</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, flash_if.o(.text.FLASH_IF_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_IF_Read &rArr; FLASH_IF_INT_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IF_INT_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_event_OnRestoreContextRequest
</UL>

<P><STRONG><a name="[179]"></a>FLASH_IF_Write</STRONG> (Thumb, 412 bytes, Stack size 56 bytes, flash_if.o(.text.FLASH_IF_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = FLASH_IF_Write &rArr; FLASH_IF_INT_Erase &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_MEM_cpy_8
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IF_INT_Read
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IF_INT_Erase
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IF_INT_Clear_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_event_OnStoreContextRequest
</UL>

<P><STRONG><a name="[1a6]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32wlxx_hal_flash.o(.text.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[0]"></a>GetBatteryLevel</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, sys_app.o(.text.GetBatteryLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GetBatteryLevel &rArr; SYS_GetBatteryLevel &rArr; ADC_ReadChannels &rArr; HAL_ADCEx_Calibration_Start &rArr; ADC_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetBatteryLevel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[3]"></a>GetDevAddr</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sys_app.o(.text.GetDevAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetDevAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetUIDw2
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetUIDw1
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetUIDw0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[1]"></a>GetTemperatureLevel</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sys_app.o(.text.GetTemperatureLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GetTemperatureLevel &rArr; SYS_GetTemperatureLevel &rArr; SYS_GetBatteryLevel &rArr; ADC_ReadChannels &rArr; HAL_ADCEx_Calibration_Start &rArr; ADC_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetTemperatureLevel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[2]"></a>GetUniqueId</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, sys_app.o(.text.GetUniqueId))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetUniqueId
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetUIDw2
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetUIDw1
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetUIDw0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[12f]"></a>HAL_ADCEx_Calibration_Start</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, stm32wlxx_hal_adc_ex.o(.text.HAL_ADCEx_Calibration_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_ADCEx_Calibration_Start &rArr; ADC_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ReadChannels
</UL>

<P><STRONG><a name="[131]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 420 bytes, Stack size 24 bytes, stm32wlxx_hal_adc.o(.text.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ReadChannels
</UL>

<P><STRONG><a name="[136]"></a>HAL_ADC_DeInit</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, stm32wlxx_hal_adc.o(.text.HAL_ADC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_ADC_DeInit &rArr; ADC_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspDeInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ReadChannels
</UL>

<P><STRONG><a name="[135]"></a>HAL_ADC_GetValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32wlxx_hal_adc.o(.text.HAL_ADC_GetValue))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ReadChannels
</UL>

<P><STRONG><a name="[1b0]"></a>HAL_ADC_Init</STRONG> (Thumb, 520 bytes, Stack size 24 bytes, stm32wlxx_hal_adc.o(.text.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
</UL>

<P><STRONG><a name="[1af]"></a>HAL_ADC_MspDeInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, adc.o(.text.HAL_ADC_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_DeInit
</UL>

<P><STRONG><a name="[1b1]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, adc.o(.text.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[133]"></a>HAL_ADC_PollForConversion</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, stm32wlxx_hal_adc.o(.text.HAL_ADC_PollForConversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_PollForConversion
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ReadChannels
</UL>

<P><STRONG><a name="[132]"></a>HAL_ADC_Start</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32wlxx_hal_adc.o(.text.HAL_ADC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_ADC_Start &rArr; ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ReadChannels
</UL>

<P><STRONG><a name="[134]"></a>HAL_ADC_Stop</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32wlxx_hal_adc.o(.text.HAL_ADC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_Stop &rArr; ADC_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ReadChannels
</UL>

<P><STRONG><a name="[197]"></a>HAL_DBGMCU_DisableDBGSleepMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wlxx_hal.o(.text.HAL_DBGMCU_DisableDBGSleepMode))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Init
</UL>

<P><STRONG><a name="[199]"></a>HAL_DBGMCU_DisableDBGStandbyMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wlxx_hal.o(.text.HAL_DBGMCU_DisableDBGStandbyMode))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Init
</UL>

<P><STRONG><a name="[198]"></a>HAL_DBGMCU_DisableDBGStopMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wlxx_hal.o(.text.HAL_DBGMCU_DisableDBGStopMode))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Init
</UL>

<P><STRONG><a name="[1fc]"></a>HAL_DMA_Abort</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32wlxx_hal_dma.o(.text.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[201]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32wlxx_hal_dma.o(.text.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[20b]"></a>HAL_DMA_ConfigChannelAttributes</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32wlxx_hal_dma.o(.text.HAL_DMA_ConfigChannelAttributes))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[1b2]"></a>HAL_DMA_DeInit</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, stm32wlxx_hal_dma.o(.text.HAL_DMA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_DeInit &rArr; DMA_CalcDMAMUXRequestGenBaseAndMask
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXRequestGenBaseAndMask
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXChannelBaseAndMask
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>

<P><STRONG><a name="[19b]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 168 bytes, Stack size 20 bytes, stm32wlxx_hal_dma.o(.text.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel5_IRQHandler
</UL>

<P><STRONG><a name="[1b5]"></a>HAL_DMA_Init</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, stm32wlxx_hal_dma.o(.text.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_Init &rArr; DMA_CalcDMAMUXRequestGenBaseAndMask
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXRequestGenBaseAndMask
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcDMAMUXChannelBaseAndMask
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Resume
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[1b6]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, stm32wlxx_hal_dma.o(.text.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
</UL>

<P><STRONG><a name="[1b8]"></a>HAL_Delay</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, sys_app.o(.text.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_TX_Start
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_RxRssi
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSleep
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>

<P><STRONG><a name="[1a2]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, stm32wlxx_hal_flash_ex.o(.text.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IF_INT_Erase
</UL>

<P><STRONG><a name="[1a1]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32wlxx_hal_flash.o(.text.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IF_Write
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IF_INT_Erase
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IF_INT_Clear_Error
</UL>

<P><STRONG><a name="[1a5]"></a>HAL_FLASH_Program</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, stm32wlxx_hal_flash.o(.text.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Fast
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IF_Write
</UL>

<P><STRONG><a name="[1a0]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32wlxx_hal_flash.o(.text.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IF_Write
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IF_INT_Erase
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IF_INT_Clear_Error
</UL>

<P><STRONG><a name="[209]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 240 bytes, Stack size 44 bytes, stm32wlxx_hal_gpio.o(.text.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>

<P><STRONG><a name="[8d]"></a>HAL_GPIO_Init</STRONG> (Thumb, 396 bytes, Stack size 40 bytes, stm32wlxx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RADIO_Init
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.text.MX_GPIO_Init)
</UL>
<P><STRONG><a name="[29b]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wlxx_hal_gpio.o(.text.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnJoinTimerLedEvent
</UL>

<P><STRONG><a name="[18b]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wlxx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RADIO_Init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RADIO_ConfigRFSwitch
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxTimerLedEvent
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxData
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxTimerLedEvent
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxData
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnJoinRequest
</UL>

<P><STRONG><a name="[12a]"></a>HAL_GetTick</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sys_app.o(.text.HAL_GetTick))
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_GetTimerValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_StopModeWakeUpSourceConfig
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[1a7]"></a>HAL_GetUIDw0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wlxx_hal.o(.text.HAL_GetUIDw0))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUniqueId
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDevAddr
</UL>

<P><STRONG><a name="[1a8]"></a>HAL_GetUIDw1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wlxx_hal.o(.text.HAL_GetUIDw1))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUniqueId
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDevAddr
</UL>

<P><STRONG><a name="[1a9]"></a>HAL_GetUIDw2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wlxx_hal.o(.text.HAL_GetUIDw2))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUniqueId
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDevAddr
</UL>

<P><STRONG><a name="[1bb]"></a>HAL_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32wlxx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_Init &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1be]"></a>HAL_InitTick</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys_app.o(.text.HAL_InitTick))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1bf]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[20a]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32wlxx_hal_cortex.o(.text.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_DeInit
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>

<P><STRONG><a name="[1da]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32wlxx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_MspInit
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[1c0]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32wlxx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_MspInit
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[1bc]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32wlxx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1c4]"></a>HAL_PWREx_DisableLowPowerRunMode</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32wlxx_hal_pwr_ex.o(.text.HAL_PWREx_DisableLowPowerRunMode))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSLEEPMode
</UL>

<P><STRONG><a name="[1c3]"></a>HAL_PWREx_EnableLowPowerRunMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wlxx_hal_pwr_ex.o(.text.HAL_PWREx_EnableLowPowerRunMode))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSLEEPMode
</UL>

<P><STRONG><a name="[2a1]"></a>HAL_PWREx_EnterSTOP2Mode</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32wlxx_hal_pwr_ex.o(.text.HAL_PWREx_EnterSTOP2Mode))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterStopMode
</UL>

<P><STRONG><a name="[2bd]"></a>HAL_PWREx_GetVoltageRange</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wlxx_hal_pwr_ex.o(.text.HAL_PWREx_GetVoltageRange))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>

<P><STRONG><a name="[1c6]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wlxx_hal_pwr.o(.text.HAL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[1c2]"></a>HAL_PWR_EnterSLEEPMode</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32wlxx_hal_pwr.o(.text.HAL_PWR_EnterSLEEPMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PWR_EnterSLEEPMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableLowPowerRunMode
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_DisableLowPowerRunMode
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterSleepMode
</UL>

<P><STRONG><a name="[1c5]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 412 bytes, Stack size 24 bytes, stm32wlxx_hal_rcc_ex.o(.text.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetI2CClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[1c8]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 496 bytes, Stack size 32 bytes, stm32wlxx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1bd]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32wlxx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[1ca]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32wlxx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1cb]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32wlxx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1c9]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, stm32wlxx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1cc]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1428 bytes, Stack size 40 bytes, stm32wlxx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1d5]"></a>HAL_RTCEx_AlarmBEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_hal_rtc_ex.o(.text.HAL_RTCEx_AlarmBEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>

<P><STRONG><a name="[34b]"></a>HAL_RTCEx_BKUPRead</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32wlxx_hal_rtc_ex.o(.text.HAL_RTCEx_BKUPRead))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_BkUp_Read_SubSeconds
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_BkUp_Read_Seconds
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_BkUp_Read_MSBticks
</UL>

<P><STRONG><a name="[34c]"></a>HAL_RTCEx_BKUPWrite</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wlxx_hal_rtc_ex.o(.text.HAL_RTCEx_BKUPWrite))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_BkUp_Write_SubSeconds
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_BkUp_Write_Seconds
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_BkUp_Write_MSBticks
</UL>

<P><STRONG><a name="[34f]"></a>HAL_RTCEx_EnableBypassShadow</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32wlxx_hal_rtc_ex.o(.text.HAL_RTCEx_EnableBypassShadow))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_Init
</UL>

<P><STRONG><a name="[1ce]"></a>HAL_RTCEx_SSRUEventCallback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, timer_if.o(.text.HAL_RTCEx_SSRUEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTCEx_SSRUEventCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_BkUp_Write_MSBticks
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_BkUp_Read_MSBticks
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SSRUIRQHandler
</UL>

<P><STRONG><a name="[1d1]"></a>HAL_RTCEx_SSRUIRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32wlxx_hal_rtc_ex.o(.text.HAL_RTCEx_SSRUIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTCEx_SSRUIRQHandler &rArr; HAL_RTCEx_SSRUEventCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SSRUEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAMP_STAMP_LSECSS_SSRU_IRQHandler
</UL>

<P><STRONG><a name="[296]"></a>HAL_RTCEx_SetSSRU_IT</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32wlxx_hal_rtc_ex.o(.text.HAL_RTCEx_SetSSRU_IT))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[1d2]"></a>HAL_RTC_AlarmAEventCallback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer_if.o(.text.HAL_RTC_AlarmAEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RTC_AlarmAEventCallback &rArr; UTIL_TIMER_IRQ_Handler &rArr; UTIL_TIMER_Start &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>

<P><STRONG><a name="[1d4]"></a>HAL_RTC_AlarmIRQHandler</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32wlxx_hal_rtc.o(.text.HAL_RTC_AlarmIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_RTC_AlarmIRQHandler &rArr; HAL_RTC_AlarmAEventCallback &rArr; UTIL_TIMER_IRQ_Handler &rArr; UTIL_TIMER_Start &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmAEventCallback
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_AlarmBEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[34e]"></a>HAL_RTC_DeactivateAlarm</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32wlxx_hal_rtc.o(.text.HAL_RTC_DeactivateAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_DeactivateAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_StopTimer
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_Init
</UL>

<P><STRONG><a name="[1d6]"></a>HAL_RTC_Init</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, stm32wlxx_hal_rtc.o(.text.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[1d7]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 120 bytes, Stack size 72 bytes, rtc.o(.text.HAL_RTC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_RTC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[297]"></a>HAL_RTC_SetAlarm_IT</STRONG> (Thumb, 340 bytes, Stack size 40 bytes, stm32wlxx_hal_rtc.o(.text.HAL_RTC_SetAlarm_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_SetAlarm_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_StartTimer
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[1db]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32wlxx_hal_rtc.o(.text.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
</UL>

<P><STRONG><a name="[2a2]"></a>HAL_ResumeTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wlxx_hal.o(.text.HAL_ResumeTick))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_ExitStopMode
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_ExitSleepMode
</UL>

<P><STRONG><a name="[1e9]"></a>HAL_SUBGHZ_CADStatusCallback</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, radio_driver.o(.text.HAL_SUBGHZ_CADStatusCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_IRQHandler
</UL>

<P><STRONG><a name="[1e8]"></a>HAL_SUBGHZ_CRCErrorCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, radio_driver.o(.text.HAL_SUBGHZ_CRCErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_IRQHandler
</UL>

<P><STRONG><a name="[1dc]"></a>HAL_SUBGHZ_ExecGetCmd</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, stm32wlxx_hal_subghz.o(.text.HAL_SUBGHZ_ExecGetCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_SUBGHZ_ExecGetCmd &rArr; SUBGHZSPI_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGHZ_WaitOnBusy
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGHZ_CheckDeviceReady
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGHZSPI_Transmit
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGHZSPI_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_IRQHandler
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_ReadCommand
</UL>

<P><STRONG><a name="[1e0]"></a>HAL_SUBGHZ_ExecSetCmd</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, stm32wlxx_hal_subghz.o(.text.HAL_SUBGHZ_ExecSetCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_SUBGHZ_ExecSetCmd &rArr; SUBGHZSPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGHZ_WaitOnBusy
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGHZ_CheckDeviceReady
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGHZSPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_IRQHandler
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteCommand
</UL>

<P><STRONG><a name="[1e7]"></a>HAL_SUBGHZ_HeaderErrorCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, radio_driver.o(.text.HAL_SUBGHZ_HeaderErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_IRQHandler
</UL>

<P><STRONG><a name="[1e6]"></a>HAL_SUBGHZ_HeaderValidCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, radio_driver.o(.text.HAL_SUBGHZ_HeaderValidCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_IRQHandler
</UL>

<P><STRONG><a name="[1e1]"></a>HAL_SUBGHZ_IRQHandler</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, stm32wlxx_hal_subghz.o(.text.HAL_SUBGHZ_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_SUBGHZ_IRQHandler &rArr; HAL_SUBGHZ_ExecGetCmd &rArr; SUBGHZSPI_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecGetCmd
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_TxCpltCallback
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_SyncWordValidCallback
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_RxTxTimeoutCallback
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_RxCpltCallback
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_PreambleDetectedCallback
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_LrFhssHopCallback
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_HeaderValidCallback
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_HeaderErrorCallback
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_CRCErrorCallback
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_CADStatusCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGHZ_Radio_IRQHandler
</UL>

<P><STRONG><a name="[1ec]"></a>HAL_SUBGHZ_Init</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, stm32wlxx_hal_subghz.o(.text.HAL_SUBGHZ_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SUBGHZ_Init &rArr; HAL_SUBGHZ_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_MspInit
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGHZSPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SUBGHZ_Init
</UL>

<P><STRONG><a name="[1eb]"></a>HAL_SUBGHZ_LrFhssHopCallback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, radio_driver.o(.text.HAL_SUBGHZ_LrFhssHopCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_IRQHandler
</UL>

<P><STRONG><a name="[1ed]"></a>HAL_SUBGHZ_MspInit</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, subghz.o(.text.HAL_SUBGHZ_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_SUBGHZ_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_Init
</UL>

<P><STRONG><a name="[1e4]"></a>HAL_SUBGHZ_PreambleDetectedCallback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, radio_driver.o(.text.HAL_SUBGHZ_PreambleDetectedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_IRQHandler
</UL>

<P><STRONG><a name="[1ef]"></a>HAL_SUBGHZ_ReadBuffer</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, stm32wlxx_hal_subghz.o(.text.HAL_SUBGHZ_ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_SUBGHZ_ReadBuffer &rArr; SUBGHZSPI_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGHZ_WaitOnBusy
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGHZ_CheckDeviceReady
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGHZSPI_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_ReadBuffer
</UL>

<P><STRONG><a name="[1f0]"></a>HAL_SUBGHZ_ReadRegisters</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, stm32wlxx_hal_subghz.o(.text.HAL_SUBGHZ_ReadRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_SUBGHZ_ReadRegisters &rArr; SUBGHZSPI_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGHZ_WaitOnBusy
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGHZ_CheckDeviceReady
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGHZSPI_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_ReadRegisters
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_ReadRegister
</UL>

<P><STRONG><a name="[1e3]"></a>HAL_SUBGHZ_RxCpltCallback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, radio_driver.o(.text.HAL_SUBGHZ_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_IRQHandler
</UL>

<P><STRONG><a name="[1ea]"></a>HAL_SUBGHZ_RxTxTimeoutCallback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, radio_driver.o(.text.HAL_SUBGHZ_RxTxTimeoutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_IRQHandler
</UL>

<P><STRONG><a name="[1e5]"></a>HAL_SUBGHZ_SyncWordValidCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, radio_driver.o(.text.HAL_SUBGHZ_SyncWordValidCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_IRQHandler
</UL>

<P><STRONG><a name="[1e2]"></a>HAL_SUBGHZ_TxCpltCallback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, radio_driver.o(.text.HAL_SUBGHZ_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_IRQHandler
</UL>

<P><STRONG><a name="[1f1]"></a>HAL_SUBGHZ_WriteBuffer</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, stm32wlxx_hal_subghz.o(.text.HAL_SUBGHZ_WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_SUBGHZ_WriteBuffer &rArr; SUBGHZSPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGHZ_WaitOnBusy
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGHZ_CheckDeviceReady
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGHZSPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteBuffer
</UL>

<P><STRONG><a name="[1f2]"></a>HAL_SUBGHZ_WriteRegisters</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, stm32wlxx_hal_subghz.o(.text.HAL_SUBGHZ_WriteRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_SUBGHZ_WriteRegisters &rArr; SUBGHZSPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGHZ_WaitOnBusy
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGHZ_CheckDeviceReady
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGHZSPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegisters
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegister
</UL>

<P><STRONG><a name="[2a0]"></a>HAL_SuspendTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wlxx_hal.o(.text.HAL_SuspendTick))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterStopMode
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterSleepMode
</UL>

<P><STRONG><a name="[1f3]"></a>HAL_UARTEx_EnableFifoMode</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32wlxx_hal_uart_ex.o(.text.HAL_UARTEx_EnableFifoMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UARTEx_EnableFifoMode &rArr; UARTEx_SetNbDataToProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init
</UL>

<P><STRONG><a name="[368]"></a>HAL_UARTEx_EnableStopMode</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32wlxx_hal_uart_ex.o(.text.HAL_UARTEx_EnableStopMode))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_ReceiveInit
</UL>

<P><STRONG><a name="[1fd]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_hal_uart.o(.text.HAL_UARTEx_RxEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
</UL>

<P><STRONG><a name="[202]"></a>HAL_UARTEx_RxFifoFullCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_hal_uart_ex.o(.text.HAL_UARTEx_RxFifoFullCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1f5]"></a>HAL_UARTEx_SetRxFifoThreshold</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32wlxx_hal_uart_ex.o(.text.HAL_UARTEx_SetRxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UARTEx_SetRxFifoThreshold &rArr; UARTEx_SetNbDataToProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init
</UL>

<P><STRONG><a name="[1f6]"></a>HAL_UARTEx_SetTxFifoThreshold</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32wlxx_hal_uart_ex.o(.text.HAL_UARTEx_SetTxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UARTEx_SetTxFifoThreshold &rArr; UARTEx_SetNbDataToProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init
</UL>

<P><STRONG><a name="[1f7]"></a>HAL_UARTEx_StopModeWakeUpSourceConfig</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, stm32wlxx_hal_uart_ex.o(.text.HAL_UARTEx_StopModeWakeUpSourceConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UARTEx_StopModeWakeUpSourceConfig &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_ReceiveInit
</UL>

<P><STRONG><a name="[1fe]"></a>HAL_UARTEx_TxFifoEmptyCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_hal_uart_ex.o(.text.HAL_UARTEx_TxFifoEmptyCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1fb]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_hal_uart_ex.o(.text.HAL_UARTEx_WakeupCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1ff]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_hal_uart.o(.text.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[1f9]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 796 bytes, Stack size 24 bytes, stm32wlxx_hal_uart.o(.text.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_TxFifoEmptyCallback
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxFifoFullCallback
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_IRQHandler
</UL>

<P><STRONG><a name="[203]"></a>HAL_UART_Init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, stm32wlxx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init
</UL>

<P><STRONG><a name="[208]"></a>HAL_UART_MspDeInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usart.o(.text.HAL_UART_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_UART_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_DeInit
</UL>

<P><STRONG><a name="[204]"></a>HAL_UART_MspInit</STRONG> (Thumb, 208 bytes, Stack size 96 bytes, usart.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_ConfigChannelAttributes
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[20c]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32wlxx_hal_uart.o(.text.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_ReceiveInit
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[20e]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usart_if.o(.text.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
</UL>

<P><STRONG><a name="[20f]"></a>HAL_UART_Transmit_DMA</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, stm32wlxx_hal_uart.o(.text.HAL_UART_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Trace_DMA
</UL>

<P><STRONG><a name="[200]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usart_if.o(.text.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATransmitCplt
</UL>

<P><STRONG><a name="[35a]"></a>HAL_UART_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_hal_uart.o(.text.HAL_UART_TxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxHalfCplt
</UL>

<P><STRONG><a name="[1b]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wlxx_it.o(.text.LPUART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LPUART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[21c]"></a>LmHandlerConfigure</STRONG> (Thumb, 420 bytes, Stack size 80 bytes, lmhandler.o(.text.LmHandlerConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = LmHandlerConfigure &rArr; LmHandlerSetSystemMaxRxError &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveLifeTimeKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraInfo_GetPtr
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementPrintKeys
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementInitMcuID
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacTestSetDutyCycleOn
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetSystemMaxRxError
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaWAN_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetActiveRegion
</UL>

<P><STRONG><a name="[78]"></a>LmHandlerDeviceTimeReq</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, lmhandler.o(.text.LmHandlerDeviceTimeReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = LmHandlerDeviceTimeReq &rArr; LoRaMacMlmeRequest &rArr; ScheduleTx &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MlmeConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhandler.o(.text.LmHandlerPackageRegister)
</UL>
<P><STRONG><a name="[164]"></a>LmHandlerGetActiveRegion</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lmhandler.o(.text.LmHandlerGetActiveRegion))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Region_get
</UL>

<P><STRONG><a name="[13f]"></a>LmHandlerGetAdrEnable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lmhandler.o(.text.LmHandlerGetAdrEnable))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_ADR_get
</UL>

<P><STRONG><a name="[15b]"></a>LmHandlerGetAppEUI</STRONG> (Thumb, 42 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerGetAppEUI))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LmHandlerGetAppEUI &rArr; LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionUS915GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_JoinEUI_get
</UL>

<P><STRONG><a name="[152]"></a>LmHandlerGetBeaconState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lmhandler.o(.text.LmHandlerGetBeaconState))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DeviceClass_get
</UL>

<P><STRONG><a name="[151]"></a>LmHandlerGetCurrentClass</STRONG> (Thumb, 40 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerGetCurrentClass))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LmHandlerGetCurrentClass &rArr; LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionUS915GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DeviceClass_get
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsIndication
</UL>

<P><STRONG><a name="[14b]"></a>LmHandlerGetDevAddr</STRONG> (Thumb, 38 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerGetDevAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LmHandlerGetDevAddr &rArr; LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionUS915GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DevAddr_get
</UL>

<P><STRONG><a name="[14d]"></a>LmHandlerGetDevEUI</STRONG> (Thumb, 42 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerGetDevEUI))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LmHandlerGetDevEUI &rArr; LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionUS915GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DevEUI_get
</UL>

<P><STRONG><a name="[154]"></a>LmHandlerGetDutyCycleEnable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lmhandler.o(.text.LmHandlerGetDutyCycleEnable))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DutyCycle_get
</UL>

<P><STRONG><a name="[237]"></a>LmHandlerGetDutyCycleWaitTime</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lmhandler.o(.text.LmHandlerGetDutyCycleWaitTime))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpComplianceProcess
</UL>

<P><STRONG><a name="[156]"></a>LmHandlerGetJoinRx1Delay</STRONG> (Thumb, 38 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerGetJoinRx1Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LmHandlerGetJoinRx1Delay &rArr; LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionUS915GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_JoinAcceptDelay1_get
</UL>

<P><STRONG><a name="[159]"></a>LmHandlerGetJoinRx2Delay</STRONG> (Thumb, 38 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerGetJoinRx2Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LmHandlerGetJoinRx2Delay &rArr; LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionUS915GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_JoinAcceptDelay2_get
</UL>

<P><STRONG><a name="[142]"></a>LmHandlerGetKey</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lmhandler.o(.text.LmHandlerGetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LmHandlerGetKey &rArr; SecureElementGetKeyByID
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementGetKeyByID
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_NwkSKey_get
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_NwkKey_get
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_AppSKey_get
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_AppKey_get
</UL>

<P><STRONG><a name="[160]"></a>LmHandlerGetNetworkID</STRONG> (Thumb, 38 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerGetNetworkID))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LmHandlerGetNetworkID &rArr; LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionUS915GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_NetworkID_get
</UL>

<P><STRONG><a name="[162]"></a>LmHandlerGetPingPeriodicity</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lmhandler.o(.text.LmHandlerGetPingPeriodicity))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_PingSlot_get
</UL>

<P><STRONG><a name="[168]"></a>LmHandlerGetRX2Params</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerGetRX2Params))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LmHandlerGetRX2Params &rArr; LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionUS915GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx2Frequency_set
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx2Frequency_get
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx2DataRate_set
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx2DataRate_get
</UL>

<P><STRONG><a name="[166]"></a>LmHandlerGetRx1Delay</STRONG> (Thumb, 38 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerGetRx1Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LmHandlerGetRx1Delay &rArr; LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionUS915GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx1Delay_get
</UL>

<P><STRONG><a name="[16a]"></a>LmHandlerGetRx2Delay</STRONG> (Thumb, 38 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerGetRx2Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LmHandlerGetRx2Delay &rArr; LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionUS915GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx2Delay_get
</UL>

<P><STRONG><a name="[148]"></a>LmHandlerGetTxDatarate</STRONG> (Thumb, 48 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerGetTxDatarate))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LmHandlerGetTxDatarate &rArr; LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionUS915GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DataRate_get
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MlmeConfirm
</UL>

<P><STRONG><a name="[16f]"></a>LmHandlerGetTxPower</STRONG> (Thumb, 48 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerGetTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LmHandlerGetTxPower &rArr; LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionUS915GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TransmitPower_get
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MlmeConfirm
</UL>

<P><STRONG><a name="[189]"></a>LmHandlerGetVersion</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lmhandler.o(.text.LmHandlerGetVersion))
<BR><BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaWAN_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_version_get
</UL>

<P><STRONG><a name="[224]"></a>LmHandlerHalt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lmhandler.o(.text.LmHandlerHalt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LmHandlerHalt &rArr; LoRaMacHalt &rArr; LoRaMacHandleNvm &rArr; Crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHalt
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerNvmDataStore
</UL>

<P><STRONG><a name="[226]"></a>LmHandlerInit</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, lmhandler.o(.text.LmHandlerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LmHandlerInit &rArr; LmHandlerPackageRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpPackagesRegistrationInit
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerPackageRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaWAN_Init
</UL>

<P><STRONG><a name="[77]"></a>LmHandlerJoin</STRONG> (Thumb, 220 bytes, Stack size 80 bytes, lmhandler.o(.text.LmHandlerJoin))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = LmHandlerJoin &rArr; LoRaMacMlmeRequest &rArr; ScheduleTx &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacStart
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSend
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Join
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Certif
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhandler.o(.text.LmHandlerPackageRegister)
</UL>
<P><STRONG><a name="[16e]"></a>LmHandlerJoinStatus</STRONG> (Thumb, 36 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerJoinStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LmHandlerJoinStatus &rArr; LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionUS915GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetNetworkID
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetKey
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetDevEUI
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetDevAddr
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetAppEUI
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetActiveRegion
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSend
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerRequestClass
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Send
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CertifSend
</UL>

<P><STRONG><a name="[15d]"></a>LmHandlerLinkCheckReq</STRONG> (Thumb, 26 bytes, Stack size 32 bytes, lmhandler.o(.text.LmHandlerLinkCheckReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = LmHandlerLinkCheckReq &rArr; LoRaMacMlmeRequest &rArr; ScheduleTx &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Link_Check
</UL>

<P><STRONG><a name="[17e]"></a>LmHandlerNvmDataStore</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerNvmDataStore))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LmHandlerNvmDataStore &rArr; LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionUS915GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmDataMgmtStoreEnd
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmDataMgmtStoreBegin
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerHalt
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_store_context
</UL>

<P><STRONG><a name="[227]"></a>LmHandlerPackageRegister</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lmhandler.o(.text.LmHandlerPackageRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LmHandlerPackageRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpPackagesRegister
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpCompliancePackageFactory
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerInit
</UL>

<P><STRONG><a name="[8a]"></a>LmHandlerProcess</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lmhandler.o(.text.LmHandlerProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = LmHandlerProcess &rArr; LoRaMacProcess &rArr; LoRaMacCryptoUnsecureMessage &rArr; SecureElementVerifyAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSend
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerPackageIsTxPending
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.text.LoRaWAN_Init)
</UL>
<P><STRONG><a name="[153]"></a>LmHandlerRequestClass</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerRequestClass))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = LmHandlerRequestClass &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveLifeTimeKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoinStatus
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacIsBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DeviceClass_set
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpComplianceProcess
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MlmeConfirm
</UL>

<P><STRONG><a name="[16d]"></a>LmHandlerSend</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = LmHandlerSend &rArr; LmHandlerJoin &rArr; LoRaMacMlmeRequest &rArr; ScheduleTx &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoinStatus
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoin
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacQueryTxPossible
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacIsStopped
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacIsBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Send
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CertifSend
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerProcess
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpComplianceProcess
</UL>

<P><STRONG><a name="[165]"></a>LmHandlerSetActiveRegion</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lmhandler.o(.text.LmHandlerSetActiveRegion))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = LmHandlerSetActiveRegion &rArr; LmHandlerConfigure &rArr; LmHandlerSetSystemMaxRxError &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveLifeTimeKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoinStatus
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Region_set
</UL>

<P><STRONG><a name="[141]"></a>LmHandlerSetAdrEnable</STRONG> (Thumb, 48 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerSetAdrEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = LmHandlerSetAdrEnable &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveLifeTimeKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_ADR_set
</UL>

<P><STRONG><a name="[15c]"></a>LmHandlerSetAppEUI</STRONG> (Thumb, 46 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerSetAppEUI))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = LmHandlerSetAppEUI &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveLifeTimeKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoinStatus
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_JoinEUI_set
</UL>

<P><STRONG><a name="[14c]"></a>LmHandlerSetDevAddr</STRONG> (Thumb, 46 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerSetDevAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = LmHandlerSetDevAddr &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveLifeTimeKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoinStatus
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DevAddr_set
</UL>

<P><STRONG><a name="[14f]"></a>LmHandlerSetDevEUI</STRONG> (Thumb, 46 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerSetDevEUI))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = LmHandlerSetDevEUI &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveLifeTimeKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoinStatus
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DevEUI_set
</UL>

<P><STRONG><a name="[155]"></a>LmHandlerSetDutyCycleEnable</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lmhandler.o(.text.LmHandlerSetDutyCycleEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LmHandlerSetDutyCycleEnable &rArr; LoRaMacTestSetDutyCycleOn &rArr; RegionVerify &rArr; RegionEU868Verify &rArr; VerifyRfFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacTestSetDutyCycleOn
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DutyCycle_set
</UL>

<P><STRONG><a name="[158]"></a>LmHandlerSetJoinRx1Delay</STRONG> (Thumb, 30 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerSetJoinRx1Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = LmHandlerSetJoinRx1Delay &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveLifeTimeKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_JoinAcceptDelay1_set
</UL>

<P><STRONG><a name="[15a]"></a>LmHandlerSetJoinRx2Delay</STRONG> (Thumb, 30 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerSetJoinRx2Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = LmHandlerSetJoinRx2Delay &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveLifeTimeKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_JoinAcceptDelay2_set
</UL>

<P><STRONG><a name="[145]"></a>LmHandlerSetKey</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, lmhandler.o(.text.LmHandlerSetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = LmHandlerSetKey &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveLifeTimeKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoinStatus
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementSetKey
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_NwkSKey_set
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_NwkKey_set
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_AppSKey_set
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_AppKey_set
</UL>

<P><STRONG><a name="[161]"></a>LmHandlerSetNetworkID</STRONG> (Thumb, 46 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerSetNetworkID))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = LmHandlerSetNetworkID &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveLifeTimeKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoinStatus
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_NetworkID_set
</UL>

<P><STRONG><a name="[163]"></a>LmHandlerSetPingPeriodicity</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lmhandler.o(.text.LmHandlerSetPingPeriodicity))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_PingSlot_set
</UL>

<P><STRONG><a name="[169]"></a>LmHandlerSetRX2Params</STRONG> (Thumb, 38 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerSetRX2Params))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = LmHandlerSetRX2Params &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveLifeTimeKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx2Frequency_set
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx2DataRate_set
</UL>

<P><STRONG><a name="[167]"></a>LmHandlerSetRx1Delay</STRONG> (Thumb, 30 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerSetRx1Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = LmHandlerSetRx1Delay &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveLifeTimeKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx1Delay_set
</UL>

<P><STRONG><a name="[16b]"></a>LmHandlerSetRx2Delay</STRONG> (Thumb, 30 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerSetRx2Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = LmHandlerSetRx2Delay &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveLifeTimeKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx2Delay_set
</UL>

<P><STRONG><a name="[220]"></a>LmHandlerSetSystemMaxRxError</STRONG> (Thumb, 30 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerSetSystemMaxRxError))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = LmHandlerSetSystemMaxRxError &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveLifeTimeKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerConfigure
</UL>

<P><STRONG><a name="[14a]"></a>LmHandlerSetTxDatarate</STRONG> (Thumb, 48 bytes, Stack size 56 bytes, lmhandler.o(.text.LmHandlerSetTxDatarate))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = LmHandlerSetTxDatarate &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveLifeTimeKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DataRate_set
</UL>

<P><STRONG><a name="[170]"></a>LmHandlerSetTxPower</STRONG> (Thumb, 48 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerSetTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = LmHandlerSetTxPower &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveLifeTimeKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TransmitPower_set
</UL>

<P><STRONG><a name="[22d]"></a>LmhpCompliancePackageFactory</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lmhpcompliance.o(.text.LmhpCompliancePackageFactory))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerPackageRegister
</UL>

<P><STRONG><a name="[22c]"></a>LmhpPackagesRegister</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lmhppackagesregistration.o(.text.LmhpPackagesRegister))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerPackageRegister
</UL>

<P><STRONG><a name="[228]"></a>LmhpPackagesRegistrationInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lmhppackagesregistration.o(.text.LmhpPackagesRegistrationInit))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerInit
</UL>

<P><STRONG><a name="[238]"></a>LoRaMacAdrCalcNext</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, loramacadr.o(.text.LoRaMacAdrCalcNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LoRaMacAdrCalcNext &rArr; RegionInitDefaults &rArr; RegionEU868InitDefaults
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacQueryTxPossible
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
</UL>

<P><STRONG><a name="[2b1]"></a>LoRaMacClassBBeaconFreqReq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBBeaconFreqReq))
<BR><BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[213]"></a>LoRaMacClassBBeaconTimerEvent</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBBeaconTimerEvent))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
</UL>

<P><STRONG><a name="[2b0]"></a>LoRaMacClassBBeaconTimingAns</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBBeaconTimingAns))
<BR><BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[2ad]"></a>LoRaMacClassBDeviceTimeAns</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBDeviceTimeAns))
<BR><BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[25c]"></a>LoRaMacClassBHaltBeaconing</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBHaltBeaconing))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHalt
</UL>

<P><STRONG><a name="[331]"></a>LoRaMacClassBInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBInit))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMacParameters
</UL>

<P><STRONG><a name="[27b]"></a>LoRaMacClassBIsAcquisitionInProgress</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBIsAcquisitionInProgress))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[211]"></a>LoRaMacClassBIsBeaconExpected</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBIsBeaconExpected))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
</UL>

<P><STRONG><a name="[33e]"></a>LoRaMacClassBIsBeaconModeActive</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBIsBeaconModeActive))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[217]"></a>LoRaMacClassBIsMulticastExpected</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBIsMulticastExpected))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[214]"></a>LoRaMacClassBIsPingExpected</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBIsPingExpected))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[33f]"></a>LoRaMacClassBIsUplinkCollision</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBIsUplinkCollision))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[26d]"></a>LoRaMacClassBMibGetRequestConfirm</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBMibGetRequestConfirm))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>

<P><STRONG><a name="[219]"></a>LoRaMacClassBMulticastSlotTimerEvent</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBMulticastSlotTimerEvent))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[2af]"></a>LoRaMacClassBPingSlotChannelReq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBPingSlotChannelReq))
<BR><BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[2ae]"></a>LoRaMacClassBPingSlotInfoAns</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBPingSlotInfoAns))
<BR><BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[216]"></a>LoRaMacClassBPingSlotTimerEvent</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBPingSlotTimerEvent))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[283]"></a>LoRaMacClassBProcess</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBProcess))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[285]"></a>LoRaMacClassBResumeBeaconing</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBResumeBeaconing))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[280]"></a>LoRaMacClassBRxBeacon</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBRxBeacon))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[212]"></a>LoRaMacClassBSetBeaconState</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBSetBeaconState))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
</UL>

<P><STRONG><a name="[286]"></a>LoRaMacClassBSetFPendingBit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBSetFPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[218]"></a>LoRaMacClassBSetMulticastSlotState</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBSetMulticastSlotState))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[27c]"></a>LoRaMacClassBSetPingSlotInfo</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBSetPingSlotInfo))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[215]"></a>LoRaMacClassBSetPingSlotState</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBSetPingSlotState))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[340]"></a>LoRaMacClassBStopRxSlots</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBStopRxSlots))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[341]"></a>LoRaMacClassBSwitchClass</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBSwitchClass))
<BR><BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchClass
</UL>

<P><STRONG><a name="[23a]"></a>LoRaMacCommandsAddCmd</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, loramaccommands.o(.text.LoRaMacCommandsAddCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LoRaMacCommandsAddCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[27a]"></a>LoRaMacCommandsGetCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, loramaccommands.o(.text.LoRaMacCommandsGetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[2a6]"></a>LoRaMacCommandsGetCmdSize</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, loramaccommands.o(.text.LoRaMacCommandsGetCmdSize))
<BR><BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[268]"></a>LoRaMacCommandsGetSizeSerializedCmds</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, loramaccommands.o(.text.LoRaMacCommandsGetSizeSerializedCmds))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacQueryTxPossible
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
</UL>

<P><STRONG><a name="[23b]"></a>LoRaMacCommandsInit</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, loramaccommands.o(.text.LoRaMacCommandsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LoRaMacCommandsInit
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[23c]"></a>LoRaMacCommandsRemoveCmd</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, loramaccommands.o(.text.LoRaMacCommandsRemoveCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LoRaMacCommandsRemoveCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsSerializeCmds
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRemoveStickyAnsCmds
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRemoveNoneStickyCmds
</UL>

<P><STRONG><a name="[23d]"></a>LoRaMacCommandsRemoveNoneStickyCmds</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, loramaccommands.o(.text.LoRaMacCommandsRemoveNoneStickyCmds))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LoRaMacCommandsRemoveNoneStickyCmds &rArr; LoRaMacCommandsRemoveCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRemoveCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
</UL>

<P><STRONG><a name="[23e]"></a>LoRaMacCommandsRemoveStickyAnsCmds</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, loramaccommands.o(.text.LoRaMacCommandsRemoveStickyAnsCmds))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LoRaMacCommandsRemoveStickyAnsCmds &rArr; LoRaMacCommandsRemoveCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRemoveCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[23f]"></a>LoRaMacCommandsSerializeCmds</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, loramaccommands.o(.text.LoRaMacCommandsSerializeCmds))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LoRaMacCommandsSerializeCmds &rArr; LoRaMacCommandsRemoveCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRemoveCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
</UL>

<P><STRONG><a name="[244]"></a>LoRaMacConfirmQueueAdd</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, loramacconfirmqueue.o(.text.LoRaMacConfirmQueueAdd))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueHandleCb
</UL>

<P><STRONG><a name="[278]"></a>LoRaMacConfirmQueueGetCnt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, loramacconfirmqueue.o(.text.LoRaMacConfirmQueueGetCnt))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[240]"></a>LoRaMacConfirmQueueGetStatus</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, loramacconfirmqueue.o(.text.LoRaMacConfirmQueueGetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LoRaMacConfirmQueueGetStatus &rArr; GetElement
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetElement
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[242]"></a>LoRaMacConfirmQueueHandleCb</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, loramacconfirmqueue.o(.text.LoRaMacConfirmQueueHandleCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LoRaMacConfirmQueueHandleCb
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueRemoveFirst
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[245]"></a>LoRaMacConfirmQueueInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, loramacconfirmqueue.o(.text.LoRaMacConfirmQueueInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LoRaMacConfirmQueueInit
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[246]"></a>LoRaMacConfirmQueueIsCmdActive</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, loramacconfirmqueue.o(.text.LoRaMacConfirmQueueIsCmdActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LoRaMacConfirmQueueIsCmdActive &rArr; GetElement
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetElement
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[277]"></a>LoRaMacConfirmQueueIsFull</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, loramacconfirmqueue.o(.text.LoRaMacConfirmQueueIsFull))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[243]"></a>LoRaMacConfirmQueueRemoveFirst</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, loramacconfirmqueue.o(.text.LoRaMacConfirmQueueRemoveFirst))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueHandleCb
</UL>

<P><STRONG><a name="[247]"></a>LoRaMacConfirmQueueSetStatus</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, loramacconfirmqueue.o(.text.LoRaMacConfirmQueueSetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LoRaMacConfirmQueueSetStatus &rArr; GetElement
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetElement
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[21a]"></a>LoRaMacConfirmQueueSetStatusCmn</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, loramacconfirmqueue.o(.text.LoRaMacConfirmQueueSetStatusCmn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LoRaMacConfirmQueueSetStatusCmn
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[248]"></a>LoRaMacCryptoDeriveLifeTimeKey</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, loramaccrypto.o(.text.LoRaMacCryptoDeriveLifeTimeKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = LoRaMacCryptoDeriveLifeTimeKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementDeriveAndStoreKey
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSetKey
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
</UL>

<P><STRONG><a name="[249]"></a>LoRaMacCryptoGetFCntDown</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, loramaccrypto.o(.text.LoRaMacCryptoGetFCntDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LoRaMacCryptoGetFCntDown
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLastFcntDown
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[267]"></a>LoRaMacCryptoGetFCntUp</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, loramaccrypto.o(.text.LoRaMacCryptoGetFCntUp))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
</UL>

<P><STRONG><a name="[24b]"></a>LoRaMacCryptoHandleJoinAccept</STRONG> (Thumb, 236 bytes, Stack size 80 bytes, loramaccrypto.o(.text.LoRaMacCryptoHandleJoinAccept))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = LoRaMacCryptoHandleJoinAccept &rArr; SecureElementProcessJoinAccept &rArr; SecureElementVerifyAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementProcessJoinAccept
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacParserJoinAccept
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoDeriveLifeTimeKey
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeriveSessionKey10x
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[24e]"></a>LoRaMacCryptoInit</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, loramaccrypto.o(.text.LoRaMacCryptoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LoRaMacCryptoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[250]"></a>LoRaMacCryptoPrepareJoinRequest</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, loramaccrypto.o(.text.LoRaMacCryptoPrepareJoinRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = LoRaMacCryptoPrepareJoinRequest &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementComputeAesCmac
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSerializerJoinRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[253]"></a>LoRaMacCryptoSecureMessage</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, loramaccrypto.o(.text.LoRaMacCryptoSecureMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementComputeAesCmac
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareB0
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PayloadEncrypt
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSerializerData
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[257]"></a>LoRaMacCryptoSetKey</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, loramaccrypto.o(.text.LoRaMacCryptoSetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveLifeTimeKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementSetKey
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoDeriveLifeTimeKey
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[276]"></a>LoRaMacCryptoSetLrWanVersion</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, loramaccrypto.o(.text.LoRaMacCryptoSetLrWanVersion))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[264]"></a>LoRaMacCryptoSetMulticastReference</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, loramaccrypto.o(.text.LoRaMacCryptoSetMulticastReference))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[258]"></a>LoRaMacCryptoUnsecureMessage</STRONG> (Thumb, 304 bytes, Stack size 336 bytes, loramaccrypto.o(.text.LoRaMacCryptoUnsecureMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = LoRaMacCryptoUnsecureMessage &rArr; SecureElementVerifyAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementVerifyAesCmac
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareB0
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PayloadEncrypt
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLastFcntDown
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyAddrItem
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacParserData
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[225]"></a>LoRaMacHalt</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, loramac.o(.text.LoRaMacHalt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LoRaMacHalt &rArr; LoRaMacHandleNvm &rArr; Crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleNvm
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBHaltBeaconing
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerHalt
</UL>

<P><STRONG><a name="[21d]"></a>LoRaMacInitialization</STRONG> (Thumb, 836 bytes, Stack size 80 bytes, loramac.o(.text.LoRaMacInitialization))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = LoRaMacInitialization &rArr; ResetMacParameters &rArr; RegionInitDefaults &rArr; RegionEU868InitDefaults
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementInit
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIsActive
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMacParameters
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand1
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGetMcuTime
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSetMulticastReference
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoInit
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueInit
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsInit
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerConfigure
</UL>

<P><STRONG><a name="[230]"></a>LoRaMacIsBusy</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, loramac.o(.text.LoRaMacIsBusy))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSend
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerRequestClass
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacStop
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
</UL>

<P><STRONG><a name="[231]"></a>LoRaMacIsStopped</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, loramac.o(.text.LoRaMacIsStopped))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSend
</UL>

<P><STRONG><a name="[233]"></a>LoRaMacMcpsRequest</STRONG> (Thumb, 860 bytes, Stack size 112 bytes, loramac.o(.text.LoRaMacMcpsRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = LoRaMacMcpsRequest &rArr; ScheduleTx &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleResponseTimeout
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMaxAppPayloadWithoutFOptsLength
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacIsBusy
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoGetFCntUp
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsSerializeCmds
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRemoveNoneStickyCmds
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsGetSizeSerializedCmds
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacAdrCalcNext
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSend
</UL>

<P><STRONG><a name="[273]"></a>LoRaMacMibClassBSetRequestConfirm</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacMibClassBSetRequestConfirm))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[6e]"></a>LoRaMacMibGetRequestConfirm</STRONG> (Thumb, 524 bytes, Stack size 16 bytes, loramac.o(.text.LoRaMacMibGetRequestConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionUS915GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementGetJoinEui
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementGetDevEui
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementGetDevAddr
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetVersion
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerRequestClass
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerNvmDataStore
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoinStatus
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetTxPower
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetTxDatarate
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetRx2Delay
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetRx1Delay
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetRX2Params
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetNetworkID
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetJoinRx2Delay
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetJoinRx1Delay
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetDevEUI
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetDevAddr
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetCurrentClass
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetAppEUI
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerConfigure
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpComplianceOnMcpsIndication
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MlmeConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhandler.o(.text.LmHandlerConfigure)
</UL>
<P><STRONG><a name="[76]"></a>LoRaMacMibSetRequestConfirm</STRONG> (Thumb, 1272 bytes, Stack size 32 bytes, loramac.o(.text.LoRaMacMibSetRequestConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveLifeTimeKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementSetJoinEui
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementSetDevEui
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementSetDevAddr
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionChanMaskSet
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchClass
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenContinuousRxCWindow
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibClassBSetRequestConfirm
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSetLrWanVersion
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSetKey
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetTxPower
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetTxDatarate
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetRx2Delay
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetRx1Delay
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetRX2Params
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetNetworkID
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetKey
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetJoinRx2Delay
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetJoinRx1Delay
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetDevEUI
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetDevAddr
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetAppEUI
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetAdrEnable
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerRequestClass
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoin
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerConfigure
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpComplianceOnMcpsIndication
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetSystemMaxRxError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhandler.o(.text.LmHandlerJoin)
</UL>
<P><STRONG><a name="[222]"></a>LoRaMacMlmeRequest</STRONG> (Thumb, 504 bytes, Stack size 48 bytes, loramac.o(.text.LoRaMacMlmeRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = LoRaMacMlmeRequest &rArr; ScheduleTx &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementGetJoinEui
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementGetDevEui
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAlternateDr
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchClass
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMacParameters
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacProcessNotify
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacIsBusy
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueIsFull
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueGetCnt
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueAdd
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsGetCmd
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsAddCmd
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBSetPingSlotInfo
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBSetBeaconState
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsAcquisitionInProgress
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBBeaconTimerEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerLinkCheckReq
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoin
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpComplianceOnMcpsIndication
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerDeviceTimeReq
</UL>

<P><STRONG><a name="[259]"></a>LoRaMacParserData</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, loramacparser.o(.text.LoRaMacParserData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LoRaMacParserData
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoUnsecureMessage
</UL>

<P><STRONG><a name="[24d]"></a>LoRaMacParserJoinAccept</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, loramacparser.o(.text.LoRaMacParserJoinAccept))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LoRaMacParserJoinAccept
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
</UL>

<P><STRONG><a name="[22e]"></a>LoRaMacProcess</STRONG> (Thumb, 2280 bytes, Stack size 144 bytes, loramac.o(.text.LoRaMacProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = LoRaMacProcess &rArr; LoRaMacCryptoUnsecureMessage &rArr; SecureElementVerifyAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementSetDevAddr
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementGetJoinEui
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_SetPeriod
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_GetCurrentTime
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetBandTxDone
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyCFList
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSub
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopRetransmission
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareRxDoneAbort
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenContinuousRxCWindow
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRetransmitTimeoutTimerEvent
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleNvm
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGetMcuTime
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacParserData
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoUnsecureMessage
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoGetFCntDown
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueSetStatusCmn
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueSetStatus
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueIsCmdActive
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueHandleCb
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueGetStatus
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueGetCnt
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRemoveStickyAnsCmds
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBSetPingSlotState
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBSetMulticastSlotState
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBSetFPendingBit
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBRxBeacon
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBResumeBeaconing
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBProcess
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBPingSlotTimerEvent
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBMulticastSlotTimerEvent
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsPingExpected
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsMulticastExpected
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerProcess
</UL>

<P><STRONG><a name="[232]"></a>LoRaMacQueryTxPossible</STRONG> (Thumb, 192 bytes, Stack size 56 bytes, loramac.o(.text.LoRaMacQueryTxPossible))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = LoRaMacQueryTxPossible &rArr; LoRaMacAdrCalcNext &rArr; RegionInitDefaults &rArr; RegionEU868InitDefaults
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMaxAppPayloadWithoutFOptsLength
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsGetSizeSerializedCmds
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacAdrCalcNext
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSend
</UL>

<P><STRONG><a name="[255]"></a>LoRaMacSerializerData</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, loramacserializer.o(.text.LoRaMacSerializerData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LoRaMacSerializerData
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSecureMessage
</UL>

<P><STRONG><a name="[251]"></a>LoRaMacSerializerJoinRequest</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, loramacserializer.o(.text.LoRaMacSerializerJoinRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LoRaMacSerializerJoinRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpyr
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoPrepareJoinRequest
</UL>

<P><STRONG><a name="[229]"></a>LoRaMacStart</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, loramac.o(.text.LoRaMacStart))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoin
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmDataMgmtStoreEnd
</UL>

<P><STRONG><a name="[289]"></a>LoRaMacStop</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, loramac.o(.text.LoRaMacStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LoRaMacStop
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacIsBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmDataMgmtStoreBegin
</UL>

<P><STRONG><a name="[221]"></a>LoRaMacTestSetDutyCycleOn</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, loramac.o(.text.LoRaMacTestSetDutyCycleOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LoRaMacTestSetDutyCycleOn &rArr; RegionVerify &rArr; RegionEU868Verify &rArr; VerifyRfFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetDutyCycleEnable
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerConfigure
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpComplianceOnMcpsIndication
</UL>

<P><STRONG><a name="[28a]"></a>LoRaWAN_Init</STRONG> (Thumb, 504 bytes, Stack size 48 bytes, lora_app.o(.text.LoRaWAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = LoRaWAN_Init &rArr; LmHandlerConfigure &rArr; LmHandlerSetSystemMaxRxError &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveLifeTimeKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IF_Init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_RegTask
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraInfo_Init
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerInit
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetVersion
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerConfigure
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LoRaWAN_Init
</UL>

<P><STRONG><a name="[150]"></a>LoraInfo_GetPtr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lora_info.o(.text.LoraInfo_GetPtr))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DeviceClass_set
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DeviceClass_get
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerConfigure
</UL>

<P><STRONG><a name="[28c]"></a>LoraInfo_Init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lora_info.o(.text.LoraInfo_Init))
<BR><BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaWAN_Init
</UL>

<P><STRONG><a name="[12e]"></a>MX_ADC_Init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, adc.o(.text.MX_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MX_ADC_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ReadChannels
</UL>

<P><STRONG><a name="[28d]"></a>MX_DMA_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dma.o(.text.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Init
</UL>

<P><STRONG><a name="[28f]"></a>MX_GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, gpio.o(.text.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[290]"></a>MX_LPUART1_UART_Init</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, usart.o(.text.MX_LPUART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MX_LPUART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_EnableFifoMode
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Init
</UL>

<P><STRONG><a name="[291]"></a>MX_LoRaWAN_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, app_lorawan.o(.text.MX_LoRaWAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = MX_LoRaWAN_Init &rArr; LoRaWAN_Init &rArr; LmHandlerConfigure &rArr; LmHandlerSetSystemMaxRxError &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveLifeTimeKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemApp_Init
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaWAN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[293]"></a>MX_LoRaWAN_Process</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_lorawan.o(.text.MX_LoRaWAN_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MX_LoRaWAN_Process &rArr; UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[295]"></a>MX_RTC_Init</STRONG> (Thumb, 116 bytes, Stack size 56 bytes, rtc.o(.text.MX_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MX_RTC_Init &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SetSSRU_IT
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_Init
</UL>

<P><STRONG><a name="[298]"></a>MX_SUBGHZ_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, subghz.o(.text.MX_SUBGHZ_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MX_SUBGHZ_Init &rArr; HAL_SUBGHZ_Init &rArr; HAL_SUBGHZ_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_Init
</UL>

<P><STRONG><a name="[1c]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_it.o(.text.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>NvmDataMgmtEvent</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nvmdatamgmt.o(.text.NvmDataMgmtEvent))
<BR>[Address Reference Count : 1]<UL><LI> lmhandler.o(.text.LmHandlerInit)
</UL>
<P><STRONG><a name="[22a]"></a>NvmDataMgmtStoreBegin</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nvmdatamgmt.o(.text.NvmDataMgmtStoreBegin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NvmDataMgmtStoreBegin &rArr; LoRaMacStop
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacStop
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerNvmDataStore
</UL>

<P><STRONG><a name="[22b]"></a>NvmDataMgmtStoreEnd</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nvmdatamgmt.o(.text.NvmDataMgmtStoreEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NvmDataMgmtStoreEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacStart
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerNvmDataStore
</UL>

<P><STRONG><a name="[95]"></a>OnRxDone</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, test_rf.o(.text.OnRxDone))
<BR><BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetEvt
</UL>
<BR>[Address Reference Count : 2]<UL><LI> test_rf.o(.text.TST_TX_Start)
<LI> test_rf.o(.text.TST_RX_Start)
</UL>
<P><STRONG><a name="[96]"></a>OnRxError</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, test_rf.o(.text.OnRxError))
<BR><BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetEvt
</UL>
<BR>[Address Reference Count : 2]<UL><LI> test_rf.o(.text.TST_TX_Start)
<LI> test_rf.o(.text.TST_RX_Start)
</UL>
<P><STRONG><a name="[97]"></a>OnRxTimeout</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, test_rf.o(.text.OnRxTimeout))
<BR><BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetEvt
</UL>
<BR>[Address Reference Count : 2]<UL><LI> test_rf.o(.text.TST_TX_Start)
<LI> test_rf.o(.text.TST_RX_Start)
</UL>
<P><STRONG><a name="[99]"></a>OnTxDone</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, test_rf.o(.text.OnTxDone))
<BR><BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetEvt
</UL>
<BR>[Address Reference Count : 2]<UL><LI> test_rf.o(.text.TST_TX_Start)
<LI> test_rf.o(.text.TST_RX_Start)
</UL>
<P><STRONG><a name="[98]"></a>OnTxTimeout</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, test_rf.o(.text.OnTxTimeout))
<BR><BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetEvt
</UL>
<BR>[Address Reference Count : 2]<UL><LI> test_rf.o(.text.TST_TX_Start)
<LI> test_rf.o(.text.TST_RX_Start)
</UL>
<P><STRONG><a name="[105]"></a>PWR_EnterOffMode</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_lpm_if.o(.text.PWR_EnterOffMode))
<BR>[Address Reference Count : 1]<UL><LI> stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
</UL>
<P><STRONG><a name="[101]"></a>PWR_EnterSleepMode</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32_lpm_if.o(.text.PWR_EnterSleepMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWR_EnterSleepMode &rArr; HAL_PWR_EnterSLEEPMode
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SuspendTick
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSLEEPMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
</UL>
<P><STRONG><a name="[103]"></a>PWR_EnterStopMode</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32_lpm_if.o(.text.PWR_EnterStopMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWR_EnterStopMode
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SuspendTick
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnterSTOP2Mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
</UL>
<P><STRONG><a name="[106]"></a>PWR_ExitOffMode</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_lpm_if.o(.text.PWR_ExitOffMode))
<BR>[Address Reference Count : 1]<UL><LI> stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
</UL>
<P><STRONG><a name="[102]"></a>PWR_ExitSleepMode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32_lpm_if.o(.text.PWR_ExitSleepMode))
<BR><BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ResumeTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
</UL>
<P><STRONG><a name="[104]"></a>PWR_ExitStopMode</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32_lpm_if.o(.text.PWR_ExitStopMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PWR_ExitStopMode &rArr; vcom_Resume &rArr; HAL_DMA_Init &rArr; DMA_CalcDMAMUXRequestGenBaseAndMask
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Resume
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ResumeTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
</UL>
<P><STRONG><a name="[21]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2b3]"></a>RBI_ConfigRFSwitch</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio_board_if.o(.text.RBI_ConfigRFSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RBI_ConfigRFSwitch &rArr; BSP_RADIO_ConfigRFSwitch
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RADIO_ConfigRFSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSwitch
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSleep
</UL>

<P><STRONG><a name="[2b4]"></a>RBI_GetRFOMaxPowerConfig</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio_board_if.o(.text.RBI_GetRFOMaxPowerConfig))
<BR><BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RADIO_GetRFOMaxPowerConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetTxParams
</UL>

<P><STRONG><a name="[2b6]"></a>RBI_GetTxConfig</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio_board_if.o(.text.RBI_GetTxConfig))
<BR><BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RADIO_GetTxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRfTxPower
</UL>

<P><STRONG><a name="[2b8]"></a>RBI_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio_board_if.o(.text.RBI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RBI_Init &rArr; BSP_RADIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RADIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_Init
</UL>

<P><STRONG><a name="[2b9]"></a>RBI_IsDCDC</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio_board_if.o(.text.RBI_IsDCDC))
<BR><BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RADIO_IsDCDC
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRegulatorMode
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SMPS_Set
</UL>

<P><STRONG><a name="[2bb]"></a>RBI_IsTCXO</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio_board_if.o(.text.RBI_IsTCXO))
<BR><BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RADIO_IsTCXO
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_Init
</UL>

<P><STRONG><a name="[2da]"></a>RFW_DeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, radio_fw.o(.text.RFW_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxGenericConfig
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxGenericConfig
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
</UL>

<P><STRONG><a name="[2c7]"></a>RFW_DeInit_TxLongPacket</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, radio_fw.o(.text.RFW_DeInit_TxLongPacket))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
</UL>

<P><STRONG><a name="[2e2]"></a>RFW_Init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, radio_fw.o(.text.RFW_Init))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxGenericConfig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxGenericConfig
</UL>

<P><STRONG><a name="[2ca]"></a>RFW_Is_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio_fw.o(.text.RFW_Is_Init))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSend
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRxBoosted
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRx
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
</UL>

<P><STRONG><a name="[2c6]"></a>RFW_Is_LongPacketModeEnabled</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio_fw.o(.text.RFW_Is_LongPacketModeEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
</UL>

<P><STRONG><a name="[2d1]"></a>RFW_ReceiveInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, radio_fw.o(.text.RFW_ReceiveInit))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRxBoosted
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRx
</UL>

<P><STRONG><a name="[fe]"></a>RFW_ReceiveLongPacket</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, radio_fw.o(.text.RFW_ReceiveLongPacket))
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[2cb]"></a>RFW_ReceivePayload</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, radio_fw.o(.text.RFW_ReceivePayload))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
</UL>

<P><STRONG><a name="[2e5]"></a>RFW_SetAntSwitch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, radio_fw.o(.text.RFW_SetAntSwitch))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxGenericConfig
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
</UL>

<P><STRONG><a name="[2d8]"></a>RFW_SetRadioModem</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, radio_fw.o(.text.RFW_SetRadioModem))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetModem
</UL>

<P><STRONG><a name="[2d5]"></a>RFW_TransmitInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, radio_fw.o(.text.RFW_TransmitInit))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSend
</UL>

<P><STRONG><a name="[fd]"></a>RFW_TransmitLongPacket</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, radio_fw.o(.text.RFW_TransmitLongPacket))
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[4d]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wlxx_it.o(.text.RTC_Alarm_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RTC_Alarm_IRQHandler &rArr; HAL_RTC_AlarmIRQHandler &rArr; HAL_RTC_AlarmAEventCallback &rArr; UTIL_TIMER_IRQ_Handler &rArr; UTIL_TIMER_Start &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32wlxx_hal_rtc.o(.text.RTC_ByteToBcd2))
<BR>[Address Reference Count : 1]<UL><LI> stm32wlxx_hal_rtc.o(.text.HAL_RTC_SetAlarm_IT)
</UL>
<P><STRONG><a name="[1d8]"></a>RTC_EnterInitMode</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, stm32wlxx_hal_rtc.o(.text.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[1d9]"></a>RTC_ExitInitMode</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32wlxx_hal_rtc.o(.text.RTC_ExitInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_ExitInitMode &rArr; HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[279]"></a>RegionAlternateDr</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, region.o(.text.RegionAlternateDr))
<BR><BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915AlternateDr
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868AlternateDr
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[281]"></a>RegionApplyCFList</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, region.o(.text.RegionApplyCFList))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = RegionApplyCFList &rArr; RegionEU868ApplyCFList &rArr; RegionEU868ChannelAdd &rArr; VerifyRfFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915ApplyCFList
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ApplyCFList
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[2f1]"></a>RegionApplyDrOffset</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, region.o(.text.RegionApplyDrOffset))
<BR><BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915ApplyDrOffset
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ApplyDrOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[32e]"></a>RegionBaseUSCalcDownlinkFrequency</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, regionbaseus.o(.text.RegionBaseUSCalcDownlinkFrequency))
<BR><BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915GetPhyParam
</UL>

<P><STRONG><a name="[2f4]"></a>RegionBaseUSComputeNext125kHzJoinChannel</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, regionbaseus.o(.text.RegionBaseUSComputeNext125kHzJoinChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RegionBaseUSComputeNext125kHzJoinChannel &rArr; randr
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915NextChannel
</UL>

<P><STRONG><a name="[275]"></a>RegionChanMaskSet</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, region.o(.text.RegionChanMaskSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RegionChanMaskSet &rArr; RegionUS915ChanMaskSet &rArr; RegionCommonCountChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915ChanMaskSet
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChanMaskSet
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[310]"></a>RegionCommonChanDisable</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, regioncommon.o(.text.RegionCommonChanDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionCommonChanDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915NextChannel
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChannelsRemove
</UL>

<P><STRONG><a name="[30d]"></a>RegionCommonChanMaskCopy</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, regioncommon.o(.text.RegionCommonChanMaskCopy))
<BR><BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915NextChannel
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915LinkAdrReq
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915InitDefaults
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915ChanMaskSet
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868InitDefaults
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChanMaskSet
</UL>

<P><STRONG><a name="[2fc]"></a>RegionCommonChanVerifyDr</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, regioncommon.o(.text.RegionCommonChanVerifyDr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegionCommonChanVerifyDr
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLinkAdrReqVerifyParams
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonGetNextLowerTxDr
</UL>

<P><STRONG><a name="[313]"></a>RegionCommonComputeRxWindowParameters</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, regioncommon.o(.text.RegionCommonComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RegionCommonComputeRxWindowParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915ComputeRxWindowParameters
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[311]"></a>RegionCommonComputeSymbolTimeFsk</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, regioncommon.o(.text.RegionCommonComputeSymbolTimeFsk))
<BR><BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[312]"></a>RegionCommonComputeSymbolTimeLoRa</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, regioncommon.o(.text.RegionCommonComputeSymbolTimeLoRa))
<BR><BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915ComputeRxWindowParameters
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[2f8]"></a>RegionCommonComputeTxPower</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, regioncommon.o(.text.RegionCommonComputeTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = RegionCommonComputeTxPower &rArr; floorf &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floorf
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915TxConfig
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868TxConfig
</UL>

<P><STRONG><a name="[31a]"></a>RegionCommonCountChannels</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, regioncommon.o(.text.RegionCommonCountChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RegionCommonCountChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915TxConfig
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915NextChannel
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915LinkAdrReq
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915ChanMaskSet
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NextChannel
</UL>

<P><STRONG><a name="[2ff]"></a>RegionCommonCountNbOfEnabledChannels</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, regioncommon.o(.text.RegionCommonCountNbOfEnabledChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RegionCommonCountNbOfEnabledChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonIdentifyChannels
</UL>

<P><STRONG><a name="[1ad]"></a>RegionCommonGetBandwidth</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, regioncommon.o(.text.RegionCommonGetBandwidth))
<BR><BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915TxConfig
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915GetPhyParam
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915ComputeRxWindowParameters
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868TxConfig
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868GetPhyParam
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ComputeRxWindowParameters
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeOnAir
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeOnAir
</UL>

<P><STRONG><a name="[2fb]"></a>RegionCommonGetNextLowerTxDr</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, regioncommon.o(.text.RegionCommonGetNextLowerTxDr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanVerifyDr
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915GetPhyParam
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868GetPhyParam
</UL>

<P><STRONG><a name="[2fd]"></a>RegionCommonIdentifyChannels</STRONG> (Thumb, 138 bytes, Stack size 56 bytes, regioncommon.o(.text.RegionCommonIdentifyChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; SysTimeToMs &rArr; SysTimeSub
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_GetElapsedTime
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountNbOfEnabledChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915NextChannel
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NextChannel
</UL>

<P><STRONG><a name="[31f]"></a>RegionCommonLimitTxPower</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, regioncommon.o(.text.RegionCommonLimitTxPower))
<BR><BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915TxConfig
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868TxConfig
</UL>

<P><STRONG><a name="[300]"></a>RegionCommonLinkAdrReqVerifyParams</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, regioncommon.o(.text.RegionCommonLinkAdrReqVerifyParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanVerifyDr
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915LinkAdrReq
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868LinkAdrReq
</UL>

<P><STRONG><a name="[317]"></a>RegionCommonParseLinkAdrReq</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, regioncommon.o(.text.RegionCommonParseLinkAdrReq))
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915LinkAdrReq
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868LinkAdrReq
</UL>

<P><STRONG><a name="[301]"></a>RegionCommonRxConfigPrint</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, regioncommon.o(.text.RegionCommonRxConfigPrint))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RegionCommonRxConfigPrint &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915RxConfig
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868RxConfig
</UL>

<P><STRONG><a name="[302]"></a>RegionCommonSetBandTxDone</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, regioncommon.o(.text.RegionCommonSetBandTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionCommonSetBandTxDone
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDutyCycle
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915SetBandTxDone
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868SetBandTxDone
</UL>

<P><STRONG><a name="[304]"></a>RegionCommonTxConfigPrint</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, regioncommon.o(.text.RegionCommonTxConfigPrint))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = RegionCommonTxConfigPrint &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915TxConfig
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868TxConfig
</UL>

<P><STRONG><a name="[2fe]"></a>RegionCommonUpdateBandTimeOff</STRONG> (Thumb, 440 bytes, Stack size 88 bytes, regioncommon.o(.text.RegionCommonUpdateBandTimeOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = RegionCommonUpdateBandTimeOff &rArr; SysTimeToMs &rArr; SysTimeSub
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_GetCurrentTime
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_GetElapsedTime
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeToMs
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSub
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeFromMs
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDutyCycle
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonIdentifyChannels
</UL>

<P><STRONG><a name="[30e]"></a>RegionCommonValueInRange</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, regioncommon.o(.text.RegionCommonValueInRange))
<BR><BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915Verify
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915RxParamSetupReq
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868Verify
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868RxParamSetupReq
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChannelAdd
</UL>

<P><STRONG><a name="[29e]"></a>RegionComputeRxWindowParameters</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, region.o(.text.RegionComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = RegionComputeRxWindowParameters &rArr; RegionUS915ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915ComputeRxWindowParameters
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ComputeRxWindowParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenContinuousRxCWindow
</UL>

<P><STRONG><a name="[2a8]"></a>RegionDlChannelReq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, region.o(.text.RegionDlChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionDlChannelReq &rArr; RegionEU868DlChannelReq &rArr; VerifyRfFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915DlChannelReq
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868DlChannelReq
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[2ed]"></a>RegionEU868AlternateDr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, regioneu868.o(.text.RegionEU868AlternateDr))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAlternateDr
</UL>

<P><STRONG><a name="[2ef]"></a>RegionEU868ApplyCFList</STRONG> (Thumb, 134 bytes, Stack size 64 bytes, regioneu868.o(.text.RegionEU868ApplyCFList))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = RegionEU868ApplyCFList &rArr; RegionEU868ChannelAdd &rArr; VerifyRfFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChannelsRemove
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChannelAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyCFList
</UL>

<P><STRONG><a name="[2f2]"></a>RegionEU868ApplyDrOffset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, regioneu868.o(.text.RegionEU868ApplyDrOffset))
<BR><BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyDrOffset
</UL>

<P><STRONG><a name="[2f6]"></a>RegionEU868ChanMaskSet</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, regioneu868.o(.text.RegionEU868ChanMaskSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionEU868ChanMaskSet
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionChanMaskSet
</UL>

<P><STRONG><a name="[30b]"></a>RegionEU868ChannelAdd</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, regioneu868.o(.text.RegionEU868ChannelAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionEU868ChannelAdd &rArr; VerifyRfFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRfFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NewChannelReq
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ApplyCFList
</UL>

<P><STRONG><a name="[30c]"></a>RegionEU868ChannelsRemove</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, regioneu868.o(.text.RegionEU868ChannelsRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionEU868ChannelsRemove &rArr; RegionCommonChanDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NewChannelReq
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ApplyCFList
</UL>

<P><STRONG><a name="[307]"></a>RegionEU868ComputeRxWindowParameters</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, regioneu868.o(.text.RegionEU868ComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = RegionEU868ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonGetBandwidth
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeFsk
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
</UL>

<P><STRONG><a name="[309]"></a>RegionEU868DlChannelReq</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, regioneu868.o(.text.RegionEU868DlChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionEU868DlChannelReq &rArr; VerifyRfFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRfFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionDlChannelReq
</UL>

<P><STRONG><a name="[314]"></a>RegionEU868GetPhyParam</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, regioneu868.o(.text.RegionEU868GetPhyParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RegionEU868GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonGetNextLowerTxDr
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonGetBandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868LinkAdrReq
</UL>

<P><STRONG><a name="[315]"></a>RegionEU868InitDefaults</STRONG> (Thumb, 188 bytes, Stack size 160 bytes, regioneu868.o(.text.RegionEU868InitDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = RegionEU868InitDefaults
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
</UL>

<P><STRONG><a name="[316]"></a>RegionEU868LinkAdrReq</STRONG> (Thumb, 340 bytes, Stack size 96 bytes, regioneu868.o(.text.RegionEU868LinkAdrReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = RegionEU868LinkAdrReq &rArr; RegionEU868GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868GetPhyParam
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonParseLinkAdrReq
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLinkAdrReqVerifyParams
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionLinkAdrReq
</UL>

<P><STRONG><a name="[318]"></a>RegionEU868NewChannelReq</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, regioneu868.o(.text.RegionEU868NewChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RegionEU868NewChannelReq &rArr; RegionEU868ChannelAdd &rArr; VerifyRfFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChannelsRemove
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChannelAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNewChannelReq
</UL>

<P><STRONG><a name="[319]"></a>RegionEU868NextChannel</STRONG> (Thumb, 232 bytes, Stack size 112 bytes, regioneu868.o(.text.RegionEU868NextChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = RegionEU868NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; SysTimeToMs &rArr; SysTimeSub
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonIdentifyChannels
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeOnAir
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNextChannel
</UL>

<P><STRONG><a name="[31b]"></a>RegionEU868RxConfig</STRONG> (Thumb, 244 bytes, Stack size 80 bytes, regioneu868.o(.text.RegionEU868RxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = RegionEU868RxConfig &rArr; RegionCommonRxConfigPrint &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonRxConfigPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
</UL>

<P><STRONG><a name="[31c]"></a>RegionEU868RxParamSetupReq</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, regioneu868.o(.text.RegionEU868RxParamSetupReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionEU868RxParamSetupReq &rArr; VerifyRfFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRfFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxParamSetupReq
</UL>

<P><STRONG><a name="[31d]"></a>RegionEU868SetBandTxDone</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, regioneu868.o(.text.RegionEU868SetBandTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionEU868SetBandTxDone &rArr; RegionCommonSetBandTxDone
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonSetBandTxDone
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetBandTxDone
</UL>

<P><STRONG><a name="[31e]"></a>RegionEU868TxConfig</STRONG> (Thumb, 272 bytes, Stack size 80 bytes, regioneu868.o(.text.RegionEU868TxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = RegionEU868TxConfig &rArr; RegionCommonTxConfigPrint &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonTxConfigPrint
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLimitTxPower
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonGetBandwidth
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeOnAir
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxConfig
</UL>

<P><STRONG><a name="[32c]"></a>RegionEU868TxParamSetupReq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, regioneu868.o(.text.RegionEU868TxParamSetupReq))
<BR><BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxParamSetupReq
</UL>

<P><STRONG><a name="[320]"></a>RegionEU868Verify</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, regioneu868.o(.text.RegionEU868Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RegionEU868Verify &rArr; VerifyRfFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRfFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
</UL>

<P><STRONG><a name="[7b]"></a>RegionGetPhyParam</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, region.o(.text.RegionGetPhyParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RegionGetPhyParam &rArr; RegionUS915GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915GetPhyParam
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868GetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerConfigure
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMaxAppPayloadWithoutFOptsLength
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacAdrCalcNext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[26e]"></a>RegionGetVersion</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, region.o(.text.RegionGetVersion))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>

<P><STRONG><a name="[239]"></a>RegionInitDefaults</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, region.o(.text.RegionInitDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = RegionInitDefaults &rArr; RegionEU868InitDefaults
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915InitDefaults
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868InitDefaults
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMacParameters
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacAdrCalcNext
</UL>

<P><STRONG><a name="[260]"></a>RegionIsActive</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, region.o(.text.RegionIsActive))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[2b2]"></a>RegionLinkAdrReq</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, region.o(.text.RegionLinkAdrReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = RegionLinkAdrReq &rArr; RegionUS915LinkAdrReq &rArr; RegionUS915GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915LinkAdrReq
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868LinkAdrReq
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[2aa]"></a>RegionNewChannelReq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, region.o(.text.RegionNewChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RegionNewChannelReq &rArr; RegionEU868NewChannelReq &rArr; RegionEU868ChannelAdd &rArr; VerifyRfFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915NewChannelReq
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NewChannelReq
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[325]"></a>RegionNextChannel</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, region.o(.text.RegionNextChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = RegionNextChannel &rArr; RegionUS915NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; SysTimeToMs &rArr; SysTimeSub
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915NextChannel
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NextChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[29f]"></a>RegionRxConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, region.o(.text.RegionRxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = RegionRxConfig &rArr; RegionUS915RxConfig &rArr; RegionCommonRxConfigPrint &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915RxConfig
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868RxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxWindowSetup
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenContinuousRxCWindow
</UL>

<P><STRONG><a name="[2a9]"></a>RegionRxParamSetupReq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, region.o(.text.RegionRxParamSetupReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionRxParamSetupReq &rArr; RegionEU868RxParamSetupReq &rArr; VerifyRfFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915RxParamSetupReq
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868RxParamSetupReq
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[27f]"></a>RegionSetBandTxDone</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, region.o(.text.RegionSetBandTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionSetBandTxDone &rArr; RegionUS915SetBandTxDone &rArr; RegionCommonSetBandTxDone
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915SetBandTxDone
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868SetBandTxDone
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[32a]"></a>RegionTxConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, region.o(.text.RegionTxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = RegionTxConfig &rArr; RegionUS915TxConfig &rArr; RegionCommonTxConfigPrint &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915TxConfig
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868TxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[2a7]"></a>RegionTxParamSetupReq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, region.o(.text.RegionTxParamSetupReq))
<BR><BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915TxParamSetupReq
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868TxParamSetupReq
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[2ee]"></a>RegionUS915AlternateDr</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, regionus915.o(.text.RegionUS915AlternateDr))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAlternateDr
</UL>

<P><STRONG><a name="[2f0]"></a>RegionUS915ApplyCFList</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, regionus915.o(.text.RegionUS915ApplyCFList))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RegionUS915ApplyCFList
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyCFList
</UL>

<P><STRONG><a name="[2f3]"></a>RegionUS915ApplyDrOffset</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, regionus915.o(.text.RegionUS915ApplyDrOffset))
<BR><BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyDrOffset
</UL>

<P><STRONG><a name="[2f7]"></a>RegionUS915ChanMaskSet</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, regionus915.o(.text.RegionUS915ChanMaskSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RegionUS915ChanMaskSet &rArr; RegionCommonCountChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionChanMaskSet
</UL>

<P><STRONG><a name="[308]"></a>RegionUS915ComputeRxWindowParameters</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, regionus915.o(.text.RegionUS915ComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = RegionUS915ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonGetBandwidth
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
</UL>

<P><STRONG><a name="[30a]"></a>RegionUS915DlChannelReq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, regionus915.o(.text.RegionUS915DlChannelReq))
<BR><BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionDlChannelReq
</UL>

<P><STRONG><a name="[321]"></a>RegionUS915GetPhyParam</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, regionus915.o(.text.RegionUS915GetPhyParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RegionUS915GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionBaseUSCalcDownlinkFrequency
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonGetNextLowerTxDr
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonGetBandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915LinkAdrReq
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
</UL>

<P><STRONG><a name="[322]"></a>RegionUS915InitDefaults</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, regionus915.o(.text.RegionUS915InitDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionUS915InitDefaults
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
</UL>

<P><STRONG><a name="[323]"></a>RegionUS915LinkAdrReq</STRONG> (Thumb, 508 bytes, Stack size 112 bytes, regionus915.o(.text.RegionUS915LinkAdrReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RegionUS915LinkAdrReq &rArr; RegionUS915GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915GetPhyParam
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonParseLinkAdrReq
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLinkAdrReqVerifyParams
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionLinkAdrReq
</UL>

<P><STRONG><a name="[324]"></a>RegionUS915NewChannelReq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, regionus915.o(.text.RegionUS915NewChannelReq))
<BR><BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNewChannelReq
</UL>

<P><STRONG><a name="[326]"></a>RegionUS915NextChannel</STRONG> (Thumb, 288 bytes, Stack size 168 bytes, regionus915.o(.text.RegionUS915NextChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = RegionUS915NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; SysTimeToMs &rArr; SysTimeSub
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionBaseUSComputeNext125kHzJoinChannel
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonIdentifyChannels
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanDisable
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeOnAir
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNextChannel
</UL>

<P><STRONG><a name="[327]"></a>RegionUS915RxConfig</STRONG> (Thumb, 168 bytes, Stack size 80 bytes, regionus915.o(.text.RegionUS915RxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = RegionUS915RxConfig &rArr; RegionCommonRxConfigPrint &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonRxConfigPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
</UL>

<P><STRONG><a name="[328]"></a>RegionUS915RxParamSetupReq</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, regionus915.o(.text.RegionUS915RxParamSetupReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegionUS915RxParamSetupReq &rArr; VerifyRfFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRfFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxParamSetupReq
</UL>

<P><STRONG><a name="[329]"></a>RegionUS915SetBandTxDone</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, regionus915.o(.text.RegionUS915SetBandTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionUS915SetBandTxDone &rArr; RegionCommonSetBandTxDone
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonSetBandTxDone
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetBandTxDone
</UL>

<P><STRONG><a name="[32b]"></a>RegionUS915TxConfig</STRONG> (Thumb, 272 bytes, Stack size 88 bytes, regionus915.o(.text.RegionUS915TxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = RegionUS915TxConfig &rArr; RegionCommonTxConfigPrint &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonTxConfigPrint
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLimitTxPower
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonGetBandwidth
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeOnAir
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxConfig
</UL>

<P><STRONG><a name="[32d]"></a>RegionUS915TxParamSetupReq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, regionus915.o(.text.RegionUS915TxParamSetupReq))
<BR><BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxParamSetupReq
</UL>

<P><STRONG><a name="[330]"></a>RegionUS915Verify</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, regionus915.o(.text.RegionUS915Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionUS915Verify &rArr; VerifyRfFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VerifyRfFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
</UL>

<P><STRONG><a name="[266]"></a>RegionVerify</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, region.o(.text.RegionVerify))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RegionVerify &rArr; RegionEU868Verify &rArr; VerifyRfFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915Verify
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868Verify
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacTestSetDutyCycleOn
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
</UL>

<P><STRONG><a name="[361]"></a>SEQ_BitPosition</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32_seq.o(.text.SEQ_BitPosition))
<BR><BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_RegTask
</UL>

<P><STRONG><a name="[1ee]"></a>SUBGHZSPI_Init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32wlxx_hal_subghz.o(.text.SUBGHZSPI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_Init
</UL>

<P><STRONG><a name="[1de]"></a>SUBGHZSPI_Receive</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, stm32wlxx_hal_subghz.o(.text.SUBGHZSPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SUBGHZSPI_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ReadRegisters
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ReadBuffer
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecGetCmd
</UL>

<P><STRONG><a name="[69]"></a>SUBGHZSPI_Transmit</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, stm32wlxx_hal_subghz.o(.text.SUBGHZSPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SUBGHZSPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_WriteRegisters
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_WriteBuffer
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecGetCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32wlxx_hal_subghz.o(.text.HAL_SUBGHZ_WriteRegisters)
</UL>
<P><STRONG><a name="[1dd]"></a>SUBGHZ_CheckDeviceReady</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, stm32wlxx_hal_subghz.o(.text.SUBGHZ_CheckDeviceReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SUBGHZ_CheckDeviceReady &rArr; SUBGHZ_WaitOnBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGHZ_WaitOnBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_WriteRegisters
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_WriteBuffer
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ReadRegisters
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ReadBuffer
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecGetCmd
</UL>

<P><STRONG><a name="[55]"></a>SUBGHZ_Radio_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32wlxx_it.o(.text.SUBGHZ_Radio_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SUBGHZ_Radio_IRQHandler &rArr; HAL_SUBGHZ_IRQHandler &rArr; HAL_SUBGHZ_ExecGetCmd &rArr; SUBGHZSPI_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1df]"></a>SUBGHZ_WaitOnBusy</STRONG> (Thumb, 68 bytes, Stack size 4 bytes, stm32wlxx_hal_subghz.o(.text.SUBGHZ_WaitOnBusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SUBGHZ_WaitOnBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGHZ_CheckDeviceReady
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_WriteRegisters
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_WriteBuffer
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ReadRegisters
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ReadBuffer
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecGetCmd
</UL>

<P><STRONG><a name="[332]"></a>SUBGRF_Calibrate</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, radio_driver.o(.text.SUBGRF_Calibrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SUBGRF_Calibrate &rArr; SUBGRF_WriteCommand &rArr; HAL_SUBGHZ_ExecSetCmd &rArr; SUBGHZSPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_Init
</UL>

<P><STRONG><a name="[334]"></a>SUBGRF_CalibrateImage</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, radio_driver.o(.text.SUBGRF_CalibrateImage))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SUBGRF_CalibrateImage &rArr; SUBGRF_WriteCommand &rArr; HAL_SUBGHZ_ExecSetCmd &rArr; SUBGHZSPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRfFrequency
</UL>

<P><STRONG><a name="[2cc]"></a>SUBGRF_GetCFO</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, radio_driver.o(.text.SUBGRF_GetCFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SUBGRF_GetCFO
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
</UL>

<P><STRONG><a name="[2dc]"></a>SUBGRF_GetFskBandwidthRegValue</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, radio_driver.o(.text.SUBGRF_GetFskBandwidthRegValue))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxGenericConfig
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
</UL>

<P><STRONG><a name="[2be]"></a>SUBGRF_GetOperatingMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, radio_driver.o(.text.SUBGRF_GetOperatingMode))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGetStatus
</UL>

<P><STRONG><a name="[2c9]"></a>SUBGRF_GetPacketStatus</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, radio_driver.o(.text.SUBGRF_GetPacketStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SUBGRF_GetPacketStatus &rArr; SUBGRF_ReadCommand &rArr; HAL_SUBGHZ_ExecGetCmd &rArr; SUBGHZSPI_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_MEM_set_8
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_ReadCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
</UL>

<P><STRONG><a name="[2c8]"></a>SUBGRF_GetPayload</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, radio_driver.o(.text.SUBGRF_GetPayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SUBGRF_GetPayload &rArr; SUBGRF_GetRxBufferStatus &rArr; SUBGRF_ReadRegister &rArr; HAL_SUBGHZ_ReadRegisters &rArr; SUBGHZSPI_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_ReadBuffer
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetRxBufferStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
</UL>

<P><STRONG><a name="[2bf]"></a>SUBGRF_GetRadioWakeUpTime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio_driver.o(.text.SUBGRF_GetRadioWakeUpTime))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGetWakeupTime
</UL>

<P><STRONG><a name="[2cf]"></a>SUBGRF_GetRandom</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, radio_driver.o(.text.SUBGRF_GetRandom))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SUBGRF_GetRandom &rArr; SUBGRF_ReadRegister &rArr; HAL_SUBGHZ_ReadRegisters &rArr; SUBGHZSPI_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetStandby
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRx
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_ReadRegisters
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRandom
</UL>

<P><STRONG><a name="[2ce]"></a>SUBGRF_GetRssiInst</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, radio_driver.o(.text.SUBGRF_GetRssiInst))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SUBGRF_GetRssiInst &rArr; SUBGRF_ReadCommand &rArr; HAL_SUBGHZ_ExecGetCmd &rArr; SUBGHZSPI_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_ReadCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRssi
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>

<P><STRONG><a name="[337]"></a>SUBGRF_GetRxBufferStatus</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, radio_driver.o(.text.SUBGRF_GetRxBufferStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SUBGRF_GetRxBufferStatus &rArr; SUBGRF_ReadRegister &rArr; HAL_SUBGHZ_ReadRegisters &rArr; SUBGHZSPI_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_ReadRegister
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_ReadCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetPayload
</UL>

<P><STRONG><a name="[2c0]"></a>SUBGRF_Init</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, radio_driver.o(.text.SUBGRF_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SUBGRF_Init &rArr; Radio_SMPS_Set &rArr; SUBGRF_ReadRegister &rArr; HAL_SUBGHZ_ReadRegisters &rArr; SUBGHZSPI_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBI_IsTCXO
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBI_Init
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SUBGHZ_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegister
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetStandby
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetTcxoMode
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_Calibrate
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SMPS_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[338]"></a>SUBGRF_ReadBuffer</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, radio_driver.o(.text.SUBGRF_ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SUBGRF_ReadBuffer &rArr; HAL_SUBGHZ_ReadBuffer &rArr; SUBGHZSPI_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetPayload
</UL>

<P><STRONG><a name="[335]"></a>SUBGRF_ReadCommand</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, radio_driver.o(.text.SUBGRF_ReadCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SUBGRF_ReadCommand &rArr; HAL_SUBGHZ_ExecGetCmd &rArr; SUBGHZSPI_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecGetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetRssiInst
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetPacketStatus
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetRxBufferStatus
</UL>

<P><STRONG><a name="[92]"></a>SUBGRF_ReadRegister</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, radio_driver.o(.text.SUBGRF_ReadRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SUBGRF_ReadRegister &rArr; HAL_SUBGHZ_ReadRegisters &rArr; SUBGHZSPI_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetWhiteningSeed
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetTxParams
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetRandom
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxGenericConfig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxGenericConfig
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSend
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRead
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetRxBufferStatus
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SMPS_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio_driver.o(.text.SUBGRF_GetCFO)
</UL>
<P><STRONG><a name="[2d0]"></a>SUBGRF_ReadRegisters</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, radio_driver.o(.text.SUBGRF_ReadRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SUBGRF_ReadRegisters &rArr; HAL_SUBGHZ_ReadRegisters &rArr; SUBGHZSPI_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetRandom
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioReadRegisters
</UL>

<P><STRONG><a name="[2d7]"></a>SUBGRF_SendPayload</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, radio_driver.o(.text.SUBGRF_SendPayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SUBGRF_SendPayload &rArr; SUBGRF_SetTx &rArr; SUBGRF_WriteCommand &rArr; HAL_SUBGHZ_ExecSetCmd &rArr; SUBGHZSPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetTx
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPayload
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSend
</UL>

<P><STRONG><a name="[2c2]"></a>SUBGRF_SetBufferBaseAddress</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, radio_driver.o(.text.SUBGRF_SetBufferBaseAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SUBGRF_SetBufferBaseAddress &rArr; SUBGRF_WriteCommand &rArr; HAL_SUBGHZ_ExecSetCmd &rArr; SUBGHZSPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[2e8]"></a>SUBGRF_SetCad</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, radio_driver.o(.text.SUBGRF_SetCad))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SUBGRF_SetCad &rArr; SUBGRF_WriteCommand &rArr; HAL_SUBGHZ_ExecSetCmd &rArr; SUBGHZSPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioStartCad
</UL>

<P><STRONG><a name="[2e3]"></a>SUBGRF_SetCrcPolynomial</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, radio_driver.o(.text.SUBGRF_SetCrcPolynomial))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SUBGRF_SetCrcPolynomial &rArr; SUBGRF_WriteRegisters &rArr; HAL_SUBGHZ_WriteRegisters &rArr; SUBGHZSPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPacketParams
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxGenericConfig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxGenericConfig
</UL>

<P><STRONG><a name="[33b]"></a>SUBGRF_SetCrcSeed</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, radio_driver.o(.text.SUBGRF_SetCrcSeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SUBGRF_SetCrcSeed &rArr; SUBGRF_WriteRegisters &rArr; HAL_SUBGHZ_WriteRegisters &rArr; SUBGHZSPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPacketParams
</UL>

<P><STRONG><a name="[2c4]"></a>SUBGRF_SetDioIrqParams</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, radio_driver.o(.text.SUBGRF_SetDioIrqParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SUBGRF_SetDioIrqParams &rArr; SUBGRF_WriteCommand &rArr; HAL_SUBGHZ_ExecSetCmd &rArr; SUBGHZSPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioStartCad
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxDutyCycle
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSend
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRxBoosted
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRx
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRandom
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[2e0]"></a>SUBGRF_SetLoRaSymbNumTimeout</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, radio_driver.o(.text.SUBGRF_SetLoRaSymbNumTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SUBGRF_SetLoRaSymbNumTimeout &rArr; SUBGRF_WriteRegister &rArr; HAL_SUBGHZ_WriteRegisters &rArr; SUBGHZSPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegister
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxGenericConfig
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
</UL>

<P><STRONG><a name="[2dd]"></a>SUBGRF_SetModulationParams</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, radio_driver.o(.text.SUBGRF_SetModulationParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SUBGRF_SetModulationParams &rArr; SUBGRF_SetPacketType &rArr; SUBGRF_WriteRegister &rArr; HAL_SUBGHZ_WriteRegisters &rArr; SUBGHZSPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPacketType
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteCommand
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxGenericConfig
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxGenericConfig
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
</UL>

<P><STRONG><a name="[33c]"></a>SUBGRF_SetPaConfig</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, radio_driver.o(.text.SUBGRF_SetPaConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SUBGRF_SetPaConfig &rArr; SUBGRF_WriteCommand &rArr; HAL_SUBGHZ_ExecSetCmd &rArr; SUBGHZSPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetTxParams
</UL>

<P><STRONG><a name="[2d6]"></a>SUBGRF_SetPacketParams</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, radio_driver.o(.text.SUBGRF_SetPacketParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SUBGRF_SetPacketParams &rArr; SUBGRF_SetPacketType &rArr; SUBGRF_WriteRegister &rArr; HAL_SUBGHZ_WriteRegisters &rArr; SUBGHZSPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPacketType
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetCrcPolynomial
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteCommand
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetCrcSeed
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxGenericConfig
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxGenericConfig
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetMaxPayloadLength
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSend
</UL>

<P><STRONG><a name="[2d9]"></a>SUBGRF_SetPacketType</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, radio_driver.o(.text.SUBGRF_SetPacketType))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SUBGRF_SetPacketType &rArr; SUBGRF_WriteRegister &rArr; HAL_SUBGHZ_WriteRegisters &rArr; SUBGHZSPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegister
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPacketParams
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetModulationParams
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetModem
</UL>

<P><STRONG><a name="[33a]"></a>SUBGRF_SetPayload</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, radio_driver.o(.text.SUBGRF_SetPayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SUBGRF_SetPayload &rArr; SUBGRF_WriteBuffer &rArr; HAL_SUBGHZ_WriteBuffer &rArr; SUBGHZSPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SendPayload
</UL>

<P><STRONG><a name="[2c1]"></a>SUBGRF_SetRegulatorMode</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, radio_driver.o(.text.SUBGRF_SetRegulatorMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SUBGRF_SetRegulatorMode &rArr; SUBGRF_WriteCommand &rArr; HAL_SUBGHZ_ExecSetCmd &rArr; SUBGHZSPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBI_IsDCDC
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[2cd]"></a>SUBGRF_SetRfFrequency</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, radio_driver.o(.text.SUBGRF_SetRfFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SUBGRF_SetRfFrequency &rArr; SUBGRF_CalibrateImage &rArr; SUBGRF_WriteCommand &rArr; HAL_SUBGHZ_ExecSetCmd &rArr; SUBGHZSPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteCommand
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_CalibrateImage
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxContinuousWave
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetChannel
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>

<P><STRONG><a name="[2e4]"></a>SUBGRF_SetRfTxPower</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, radio_driver.o(.text.SUBGRF_SetRfTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SUBGRF_SetRfTxPower &rArr; SUBGRF_SetTxParams &rArr; SUBGRF_ReadRegister &rArr; HAL_SUBGHZ_ReadRegisters &rArr; SUBGHZSPI_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBI_GetTxConfig
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetTxParams
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTxCw
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxGenericConfig
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxContinuousWave
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
</UL>

<P><STRONG><a name="[2d3]"></a>SUBGRF_SetRx</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, radio_driver.o(.text.SUBGRF_SetRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SUBGRF_SetRx &rArr; SUBGRF_WriteCommand &rArr; HAL_SUBGHZ_ExecSetCmd &rArr; SUBGHZSPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetRandom
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRx
</UL>

<P><STRONG><a name="[2d4]"></a>SUBGRF_SetRxBoosted</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, radio_driver.o(.text.SUBGRF_SetRxBoosted))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SUBGRF_SetRxBoosted &rArr; SUBGRF_WriteRegister &rArr; HAL_SUBGHZ_WriteRegisters &rArr; SUBGHZSPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegister
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRxBoosted
</UL>

<P><STRONG><a name="[2e1]"></a>SUBGRF_SetRxDutyCycle</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, radio_driver.o(.text.SUBGRF_SetRxDutyCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SUBGRF_SetRxDutyCycle &rArr; SUBGRF_WriteCommand &rArr; HAL_SUBGHZ_ExecSetCmd &rArr; SUBGHZSPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxDutyCycle
</UL>

<P><STRONG><a name="[2e7]"></a>SUBGRF_SetSleep</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, radio_driver.o(.text.SUBGRF_SetSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SUBGRF_SetSleep &rArr; Radio_SMPS_Set &rArr; SUBGRF_ReadRegister &rArr; HAL_SUBGHZ_ReadRegisters &rArr; SUBGHZSPI_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBI_ConfigRFSwitch
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteCommand
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SMPS_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSleep
</UL>

<P><STRONG><a name="[2c5]"></a>SUBGRF_SetStandby</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, radio_driver.o(.text.SUBGRF_SetStandby))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SUBGRF_SetStandby &rArr; SUBGRF_WriteCommand &rArr; HAL_SUBGHZ_ExecSetCmd &rArr; SUBGHZSPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_Init
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetRandom
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioStandby
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
</UL>

<P><STRONG><a name="[2db]"></a>SUBGRF_SetStopRxTimerOnPreambleDetect</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, radio_driver.o(.text.SUBGRF_SetStopRxTimerOnPreambleDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SUBGRF_SetStopRxTimerOnPreambleDetect &rArr; SUBGRF_WriteCommand &rArr; HAL_SUBGHZ_ExecSetCmd &rArr; SUBGHZSPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxGenericConfig
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
</UL>

<P><STRONG><a name="[2d2]"></a>SUBGRF_SetSwitch</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, radio_driver.o(.text.SUBGRF_SetSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SUBGRF_SetSwitch &rArr; Radio_SMPS_Set &rArr; SUBGRF_ReadRegister &rArr; HAL_SUBGHZ_ReadRegisters &rArr; SUBGHZSPI_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBI_ConfigRFSwitch
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SMPS_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTxPrbs
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTxCw
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioStartCad
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxContinuousWave
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxDutyCycle
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSend
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRxBoosted
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRx
</UL>

<P><STRONG><a name="[2de]"></a>SUBGRF_SetSyncWord</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, radio_driver.o(.text.SUBGRF_SetSyncWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SUBGRF_SetSyncWord &rArr; SUBGRF_WriteRegisters &rArr; HAL_SUBGHZ_WriteRegisters &rArr; SUBGHZSPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxGenericConfig
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxGenericConfig
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
</UL>

<P><STRONG><a name="[339]"></a>SUBGRF_SetTcxoMode</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, radio_driver.o(.text.SUBGRF_SetTcxoMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SUBGRF_SetTcxoMode &rArr; SUBGRF_WriteCommand &rArr; HAL_SUBGHZ_ExecSetCmd &rArr; SUBGHZSPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_Init
</UL>

<P><STRONG><a name="[2ea]"></a>SUBGRF_SetTx</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, radio_driver.o(.text.SUBGRF_SetTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SUBGRF_SetTx &rArr; SUBGRF_WriteCommand &rArr; HAL_SUBGHZ_ExecSetCmd &rArr; SUBGHZSPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SendPayload
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTxPrbs
</UL>

<P><STRONG><a name="[2e6]"></a>SUBGRF_SetTxContinuousWave</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, radio_driver.o(.text.SUBGRF_SetTxContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SUBGRF_SetTxContinuousWave &rArr; SUBGRF_WriteCommand &rArr; HAL_SUBGHZ_ExecSetCmd &rArr; SUBGHZSPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTxCw
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxContinuousWave
</UL>

<P><STRONG><a name="[2e9]"></a>SUBGRF_SetTxInfinitePreamble</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, radio_driver.o(.text.SUBGRF_SetTxInfinitePreamble))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SUBGRF_SetTxInfinitePreamble &rArr; SUBGRF_WriteCommand &rArr; HAL_SUBGHZ_ExecSetCmd &rArr; SUBGHZSPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTxPrbs
</UL>

<P><STRONG><a name="[2c3]"></a>SUBGRF_SetTxParams</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, radio_driver.o(.text.SUBGRF_SetTxParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SUBGRF_SetTxParams &rArr; SUBGRF_ReadRegister &rArr; HAL_SUBGHZ_ReadRegisters &rArr; SUBGHZSPI_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBI_GetRFOMaxPowerConfig
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegister
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_ReadRegister
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteCommand
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPaConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRfTxPower
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[2df]"></a>SUBGRF_SetWhiteningSeed</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, radio_driver.o(.text.SUBGRF_SetWhiteningSeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SUBGRF_SetWhiteningSeed &rArr; SUBGRF_ReadRegister &rArr; HAL_SUBGHZ_ReadRegisters &rArr; SUBGHZSPI_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegister
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxGenericConfig
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxGenericConfig
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
</UL>

<P><STRONG><a name="[33d]"></a>SUBGRF_WriteBuffer</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, radio_driver.o(.text.SUBGRF_WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SUBGRF_WriteBuffer &rArr; HAL_SUBGHZ_WriteBuffer &rArr; SUBGHZSPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPayload
</UL>

<P><STRONG><a name="[333]"></a>SUBGRF_WriteCommand</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, radio_driver.o(.text.SUBGRF_WriteCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SUBGRF_WriteCommand &rArr; HAL_SUBGHZ_ExecSetCmd &rArr; SUBGHZSPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetTxParams
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetTxInfinitePreamble
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetTxContinuousWave
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetTx
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetStopRxTimerOnPreambleDetect
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetStandby
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSleep
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRxDutyCycle
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRxBoosted
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRx
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRfFrequency
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRegulatorMode
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPacketType
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPacketParams
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetModulationParams
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetLoRaSymbNumTimeout
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetDioIrqParams
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetCad
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetBufferBaseAddress
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetTcxoMode
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPaConfig
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_CalibrateImage
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_Calibrate
</UL>

<P><STRONG><a name="[91]"></a>SUBGRF_WriteRegister</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, radio_driver.o(.text.SUBGRF_WriteRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SUBGRF_WriteRegister &rArr; HAL_SUBGHZ_WriteRegisters &rArr; SUBGHZSPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_WriteRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetWhiteningSeed
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetTxParams
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRxBoosted
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPacketType
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetLoRaSymbNumTimeout
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioWrite
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTxPrbs
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTxCw
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxGenericConfig
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxContinuousWave
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxGenericConfig
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetPublicNetwork
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSend
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Radio_SMPS_Set
</UL>
<BR>[Address Reference Count : 2]<UL><LI> radio.o(.text.RadioIrqProcess)
<LI> radio_driver.o(.text.SUBGRF_GetRandom)
</UL>
<P><STRONG><a name="[2eb]"></a>SUBGRF_WriteRegisters</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, radio_driver.o(.text.SUBGRF_WriteRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SUBGRF_WriteRegisters &rArr; HAL_SUBGHZ_WriteRegisters &rArr; SUBGHZSPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_WriteRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSyncWord
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetCrcPolynomial
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioWriteRegisters
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetCrcSeed
</UL>

<P><STRONG><a name="[1f]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[171]"></a>SYS_GetBatteryLevel</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, adc_if.o(.text.SYS_GetBatteryLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SYS_GetBatteryLevel &rArr; ADC_ReadChannels &rArr; HAL_ADCEx_Calibration_Start &rArr; ADC_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ReadChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetTemperatureLevel
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryLevel
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_bat_get
</UL>

<P><STRONG><a name="[1ab]"></a>SYS_GetTemperatureLevel</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, adc_if.o(.text.SYS_GetTemperatureLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SYS_GetTemperatureLevel &rArr; SYS_GetBatteryLevel &rArr; ADC_ReadChannels &rArr; HAL_ADCEx_Calibration_Start &rArr; ADC_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ReadChannels
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetBatteryLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTemperatureLevel
</UL>

<P><STRONG><a name="[347]"></a>SYS_InitMeasurement</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adc_if.o(.text.SYS_InitMeasurement))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemApp_Init
</UL>

<P><STRONG><a name="[2a4]"></a>SecureElementAesEncrypt</STRONG> (Thumb, 108 bytes, Stack size 280 bytes, soft-se.o(.text.SecureElementAesEncrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = SecureElementAesEncrypt &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyByID
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_aes_set_key
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_aes_encrypt
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementSetKey
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementProcessJoinAccept
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementDeriveAndStoreKey
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PayloadEncrypt
</UL>

<P><STRONG><a name="[252]"></a>SecureElementComputeAesCmac</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, soft-se.o(.text.SecureElementComputeAesCmac))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCmac
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSecureMessage
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoPrepareJoinRequest
</UL>

<P><STRONG><a name="[19d]"></a>SecureElementDeriveAndStoreKey</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, soft-se.o(.text.SecureElementDeriveAndStoreKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementSetKey
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementAesEncrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoDeriveLifeTimeKey
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeriveSessionKey10x
</UL>

<P><STRONG><a name="[26c]"></a>SecureElementGetDevAddr</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, soft-se.o(.text.SecureElementGetDevAddr))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>

<P><STRONG><a name="[26a]"></a>SecureElementGetDevEui</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, soft-se.o(.text.SecureElementGetDevEui))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SecureElementGetDevEui
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementInitMcuID
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintIds
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>

<P><STRONG><a name="[26b]"></a>SecureElementGetJoinEui</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, soft-se.o(.text.SecureElementGetJoinEui))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SecureElementGetJoinEui
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintIds
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[223]"></a>SecureElementGetKeyByID</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, soft-se.o(.text.SecureElementGetKeyByID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SecureElementGetKeyByID
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetKey
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintKey
</UL>

<P><STRONG><a name="[263]"></a>SecureElementInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, soft-se.o(.text.SecureElementInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SecureElementInit
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[21e]"></a>SecureElementInitMcuID</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, soft-se.o(.text.SecureElementInitMcuID))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SecureElementInitMcuID &rArr; SecureElementSetDevEui
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementSetDevEui
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementGetDevEui
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerConfigure
</UL>

<P><STRONG><a name="[21f]"></a>SecureElementPrintKeys</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, soft-se.o(.text.SecureElementPrintKeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SecureElementPrintKeys &rArr; PrintIds &rArr; SecureElementGetJoinEui
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintIds
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerConfigure
</UL>

<P><STRONG><a name="[29a]"></a>SecureElementPrintSessionKeys</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, soft-se.o(.text.SecureElementPrintSessionKeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SecureElementPrintSessionKeys &rArr; PrintIds &rArr; SecureElementGetJoinEui
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintIds
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MlmeConfirm
</UL>

<P><STRONG><a name="[24c]"></a>SecureElementProcessJoinAccept</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, soft-se.o(.text.SecureElementProcessJoinAccept))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = SecureElementProcessJoinAccept &rArr; SecureElementVerifyAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementVerifyAesCmac
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementAesEncrypt
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
</UL>

<P><STRONG><a name="[272]"></a>SecureElementSetDevAddr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, soft-se.o(.text.SecureElementSetDevAddr))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MlmeConfirm
</UL>

<P><STRONG><a name="[270]"></a>SecureElementSetDevEui</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, soft-se.o(.text.SecureElementSetDevEui))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SecureElementSetDevEui
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementInitMcuID
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[271]"></a>SecureElementSetJoinEui</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, soft-se.o(.text.SecureElementSetJoinEui))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SecureElementSetJoinEui
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[234]"></a>SecureElementSetKey</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, soft-se.o(.text.SecureElementSetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementAesEncrypt
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetKey
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementDeriveAndStoreKey
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSetKey
</UL>

<P><STRONG><a name="[25b]"></a>SecureElementVerifyAesCmac</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, soft-se.o(.text.SecureElementVerifyAesCmac))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = SecureElementVerifyAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCmac
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementProcessJoinAccept
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoUnsecureMessage
</UL>

<P><STRONG><a name="[22]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_it.o(.text.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2ab]"></a>SysTimeAdd</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32_systime.o(.text.SysTimeAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTimeAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGet
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeFromMs
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[306]"></a>SysTimeFromMs</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, stm32_systime.o(.text.SysTimeFromMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTimeFromMs &rArr; SysTimeAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
</UL>

<P><STRONG><a name="[15e]"></a>SysTimeGet</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, stm32_systime.o(.text.SysTimeGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SysTimeGet &rArr; SysTimeAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimestampNow
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_LocalTime_get
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
</UL>

<P><STRONG><a name="[262]"></a>SysTimeGetMcuTime</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32_systime.o(.text.SysTimeGetMcuTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTimeGetMcuTime
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[15f]"></a>SysTimeLocalTime</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, stm32_systime.o(.text.SysTimeLocalTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SysTimeLocalTime &rArr; CalendarDiv61
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalendarDiv61
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalendarDiv60
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_LocalTime_get
</UL>

<P><STRONG><a name="[2ac]"></a>SysTimeSet</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, stm32_systime.o(.text.SysTimeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SysTimeSet &rArr; SysTimeSub
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSub
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[27e]"></a>SysTimeSub</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32_systime.o(.text.SysTimeSub))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTimeSub
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeToMs
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSet
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[305]"></a>SysTimeToMs</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, stm32_systime.o(.text.SysTimeToMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTimeToMs &rArr; SysTimeSub
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSub
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
</UL>

<P><STRONG><a name="[292]"></a>SystemApp_Init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, sys_app.o(.text.SystemApp_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SystemApp_Init &rArr; DBG_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Init
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LPM_SetOffMode
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LPM_Init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_SetVerboseLevel
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_RegisterTimeStampFunction
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_Init
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_InitMeasurement
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LoRaWAN_Init
</UL>

<P><STRONG><a name="[34a]"></a>SystemClock_Config</STRONG> (Thumb, 140 bytes, Stack size 120 bytes, main.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[62]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_stm32wlxx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(.text)
</UL>
<P><STRONG><a name="[25]"></a>TAMP_STAMP_LSECSS_SSRU_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32wlxx_it.o(.text.TAMP_STAMP_LSECSS_SSRU_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TAMP_STAMP_LSECSS_SSRU_IRQHandler &rArr; HAL_RTCEx_SSRUIRQHandler &rArr; HAL_RTCEx_SSRUEventCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SSRUIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[108]"></a>TIMER_IF_BkUp_Read_Seconds</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer_if.o(.text.TIMER_IF_BkUp_Read_Seconds))
<BR><BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.rodata.UTIL_SYSTIMDriver)
</UL>
<P><STRONG><a name="[10a]"></a>TIMER_IF_BkUp_Read_SubSeconds</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer_if.o(.text.TIMER_IF_BkUp_Read_SubSeconds))
<BR><BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.rodata.UTIL_SYSTIMDriver)
</UL>
<P><STRONG><a name="[107]"></a>TIMER_IF_BkUp_Write_Seconds</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer_if.o(.text.TIMER_IF_BkUp_Write_Seconds))
<BR><BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.rodata.UTIL_SYSTIMDriver)
</UL>
<P><STRONG><a name="[109]"></a>TIMER_IF_BkUp_Write_SubSeconds</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer_if.o(.text.TIMER_IF_BkUp_Write_SubSeconds))
<BR><BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.rodata.UTIL_SYSTIMDriver)
</UL>
<P><STRONG><a name="[115]"></a>TIMER_IF_Convert_Tick2ms</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer_if.o(.text.TIMER_IF_Convert_Tick2ms))
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.rodata.UTIL_TimerDriver)
</UL>
<P><STRONG><a name="[114]"></a>TIMER_IF_Convert_ms2Tick</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timer_if.o(.text.TIMER_IF_Convert_ms2Tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.rodata.UTIL_TimerDriver)
</UL>
<P><STRONG><a name="[1b9]"></a>TIMER_IF_DelayMs</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, timer_if.o(.text.TIMER_IF_DelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIMER_IF_DelayMs &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimerTicks
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>

<P><STRONG><a name="[113]"></a>TIMER_IF_GetMinimumTimeout</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer_if.o(.text.TIMER_IF_GetMinimumTimeout))
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.rodata.UTIL_TimerDriver)
</UL>
<P><STRONG><a name="[10b]"></a>TIMER_IF_GetTime</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, timer_if.o(.text.TIMER_IF_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER_IF_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_BkUp_Read_MSBticks
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimerTicks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.rodata.UTIL_SYSTIMDriver)
</UL>
<P><STRONG><a name="[110]"></a>TIMER_IF_GetTimerContext</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer_if.o(.text.TIMER_IF_GetTimerContext))
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.rodata.UTIL_TimerDriver)
</UL>
<P><STRONG><a name="[111]"></a>TIMER_IF_GetTimerElapsedTime</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, timer_if.o(.text.TIMER_IF_GetTimerElapsedTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_IF_GetTimerElapsedTime
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimerTicks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.rodata.UTIL_TimerDriver)
</UL>
<P><STRONG><a name="[112]"></a>TIMER_IF_GetTimerValue</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer_if.o(.text.TIMER_IF_GetTimerValue))
<BR><BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimerTicks
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.rodata.UTIL_TimerDriver)
</UL>
<P><STRONG><a name="[10c]"></a>TIMER_IF_Init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, timer_if.o(.text.TIMER_IF_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = TIMER_IF_Init &rArr; MX_RTC_Init &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_StopTimer
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_SetTimerContext
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_EnableBypassShadow
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_BkUp_Write_MSBticks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.rodata.UTIL_TimerDriver)
</UL>
<P><STRONG><a name="[10f]"></a>TIMER_IF_SetTimerContext</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, timer_if.o(.text.TIMER_IF_SetTimerContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_IF_SetTimerContext
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimerTicks
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.rodata.UTIL_TimerDriver)
</UL>
<P><STRONG><a name="[10d]"></a>TIMER_IF_StartTimer</STRONG> (Thumb, 76 bytes, Stack size 64 bytes, timer_if.o(.text.TIMER_IF_StartTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TIMER_IF_StartTimer &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_StopTimer
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.rodata.UTIL_TimerDriver)
</UL>
<P><STRONG><a name="[10e]"></a>TIMER_IF_StopTimer</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, timer_if.o(.text.TIMER_IF_StopTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER_IF_StopTimer &rArr; HAL_RTC_DeactivateAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_StartTimer
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.rodata.UTIL_TimerDriver)
</UL>
<P><STRONG><a name="[180]"></a>TST_RX_Start</STRONG> (Thumb, 684 bytes, Stack size 152 bytes, test_rf.o(.text.TST_RX_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = TST_RX_Start &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_WaitEvt
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_rx
</UL>

<P><STRONG><a name="[181]"></a>TST_RxRssi</STRONG> (Thumb, 264 bytes, Stack size 104 bytes, test_rf.o(.text.TST_RxRssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = TST_RxRssi &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_rxRssi
</UL>

<P><STRONG><a name="[185]"></a>TST_TX_Start</STRONG> (Thumb, 688 bytes, Stack size 88 bytes, test_rf.o(.text.TST_TX_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = TST_TX_Start &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_WaitEvt
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_MEM_set_8
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_tx_hopping
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_tx
</UL>

<P><STRONG><a name="[186]"></a>TST_TxTone</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, test_rf.o(.text.TST_TxTone))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = TST_TxTone &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_txTone
</UL>

<P><STRONG><a name="[17f]"></a>TST_get_config</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, test_rf.o(.text.TST_get_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TST_get_config
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_MEM_cpy_8
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_tx_hopping
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_set_config
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_get_config
</UL>

<P><STRONG><a name="[183]"></a>TST_set_config</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, test_rf.o(.text.TST_set_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TST_set_config
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_MEM_cpy_8
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_tx_hopping
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_set_config
</UL>

<P><STRONG><a name="[184]"></a>TST_stop</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, test_rf.o(.text.TST_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TST_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_stop
</UL>

<P><STRONG><a name="[364]"></a>TimerExists</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32_timer.o(.text.TimerExists))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_SetPeriod
</UL>

<P><STRONG><a name="[356]"></a>TimerInsertNewHeadTimer</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32_timer.o(.text.TimerInsertNewHeadTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TimerInsertNewHeadTimer &rArr; TimerSetTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
</UL>

<P><STRONG><a name="[365]"></a>TimerInsertTimer</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32_timer.o(.text.TimerInsertTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TimerInsertTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
</UL>

<P><STRONG><a name="[357]"></a>TimerSetTimeout</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, stm32_timer.o(.text.TimerSetTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TimerSetTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_IRQ_Handler
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsertNewHeadTimer
</UL>

<P><STRONG><a name="[206]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, stm32wlxx_hal_uart.o(.text.UART_AdvFeatureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[207]"></a>UART_CheckIdleState</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, stm32wlxx_hal_uart.o(.text.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[205]"></a>UART_SetConfig</STRONG> (Thumb, 504 bytes, Stack size 16 bytes, stm32wlxx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[20d]"></a>UART_Start_Receive_IT</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, stm32wlxx_hal_uart.o(.text.UART_Start_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>

<P><STRONG><a name="[1f8]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, stm32wlxx_hal_uart.o(.text.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_StopModeWakeUpSourceConfig
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[66]"></a>UTIL_ADV_TRACE_COND_FSend</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, stm32_adv_trace.o(.text.UTIL_ADV_TRACE_COND_FSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_vsnprintf_like
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACE_UnLock
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACE_Send
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACE_Lock
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACE_AllocateBufer
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaWAN_Init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_TxTone
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_TX_Start
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_RxRssi
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_RX_Start
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_verbose_set
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_tx_hopping
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_tx
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_stop
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_rx
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_get_config
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_store_context
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Send
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Region_get
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_LocalTime_get
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DeviceClass_get
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DevAddr_get
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_u
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_d
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_8_02x
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_16_02x
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerConfigure
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Process
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_event_receive
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_event_join
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_event_confirm
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_event_OnNvmDataChange
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_event_ClassUpdate
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_event_Beacon
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_error
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintKey
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonTxConfigPrint
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonRxConfigPrint
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxTimeout
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxTimeout
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSend
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
</UL>
<BR>[Address Reference Count : 4]<UL><LI> lora_app.o(.text.LoRaWAN_Init)
<LI> lora_at.o(.text.AT_version_get)
<LI> lora_at.o(.text.AT_test_get_config)
<LI> soft-se.o(.text.PrintIds)
</UL>
<P><STRONG><a name="[187]"></a>UTIL_ADV_TRACE_GetVerboseLevel</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32_adv_trace.o(.text.UTIL_ADV_TRACE_GetVerboseLevel))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_verbose_get
</UL>

<P><STRONG><a name="[345]"></a>UTIL_ADV_TRACE_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32_adv_trace.o(.text.UTIL_ADV_TRACE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UTIL_ADV_TRACE_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_MEM_set_8
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemApp_Init
</UL>

<P><STRONG><a name="[191]"></a>UTIL_ADV_TRACE_IsBufferEmpty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32_adv_trace.o(.text.UTIL_ADV_TRACE_IsBufferEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Process
</UL>

<P><STRONG><a name="[354]"></a>UTIL_ADV_TRACE_PostSendHook</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_app.o(.text.UTIL_ADV_TRACE_PostSendHook))
<BR><BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LPM_SetStopMode
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACE_TxCpltCallback
</UL>

<P><STRONG><a name="[353]"></a>UTIL_ADV_TRACE_PreSendHook</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_app.o(.text.UTIL_ADV_TRACE_PreSendHook))
<BR><BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LPM_SetStopMode
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACE_Send
</UL>

<P><STRONG><a name="[346]"></a>UTIL_ADV_TRACE_RegisterTimeStampFunction</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32_adv_trace.o(.text.UTIL_ADV_TRACE_RegisterTimeStampFunction))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemApp_Init
</UL>

<P><STRONG><a name="[188]"></a>UTIL_ADV_TRACE_SetVerboseLevel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32_adv_trace.o(.text.UTIL_ADV_TRACE_SetVerboseLevel))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemApp_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_verbose_set
</UL>

<P><STRONG><a name="[18f]"></a>UTIL_ADV_TRACE_StartRxProcess</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32_adv_trace.o(.text.UTIL_ADV_TRACE_StartRxProcess))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Init
</UL>

<P><STRONG><a name="[360]"></a>UTIL_LPM_EnterLowPower</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32_lpm.o(.text.UTIL_LPM_EnterLowPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UTIL_LPM_EnterLowPower
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Idle
</UL>

<P><STRONG><a name="[348]"></a>UTIL_LPM_Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32_lpm.o(.text.UTIL_LPM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemApp_Init
</UL>

<P><STRONG><a name="[349]"></a>UTIL_LPM_SetOffMode</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32_lpm.o(.text.UTIL_LPM_SetOffMode))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemApp_Init
</UL>

<P><STRONG><a name="[35d]"></a>UTIL_LPM_SetStopMode</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32_lpm.o(.text.UTIL_LPM_SetStopMode))
<BR><BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_PreSendHook
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_PostSendHook
</UL>

<P><STRONG><a name="[1a4]"></a>UTIL_MEM_cpy_8</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32_mem.o(.text.UTIL_MEM_cpy_8))
<BR><BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_MEM_cpy_8
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_MEM_cpy_8
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IF_Write
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IF_INT_Read
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_set_config
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_get_config
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxGenericConfig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxGenericConfig
</UL>

<P><STRONG><a name="[336]"></a>UTIL_MEM_set_8</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32_mem.o(.text.UTIL_MEM_set_8))
<BR><BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_MEM_set_8
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_Init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_TX_Start
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_MEM_set_8
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetPacketStatus
</UL>

<P><STRONG><a name="[35e]"></a>UTIL_SEQ_EvtIdle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32_seq.o(.text.UTIL_SEQ_EvtIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_WaitEvt
</UL>

<P><STRONG><a name="[35f]"></a>UTIL_SEQ_Idle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys_app.o(.text.UTIL_SEQ_Idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LPM_EnterLowPower
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>

<P><STRONG><a name="[363]"></a>UTIL_SEQ_PostIdle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_seq.o(.text.UTIL_SEQ_PostIdle))
<BR><BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>

<P><STRONG><a name="[362]"></a>UTIL_SEQ_PreIdle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_seq.o(.text.UTIL_SEQ_PreIdle))
<BR><BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>

<P><STRONG><a name="[147]"></a>UTIL_SEQ_RegTask</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32_seq.o(.text.UTIL_SEQ_RegTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UTIL_SEQ_RegTask
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEQ_BitPosition
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaWAN_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Certif
</UL>

<P><STRONG><a name="[294]"></a>UTIL_SEQ_Run</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, stm32_seq.o(.text.UTIL_SEQ_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Idle
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_PreIdle
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_PostIdle
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEQ_BitPosition
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LoRaWAN_Process
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_EvtIdle
</UL>

<P><STRONG><a name="[29c]"></a>UTIL_SEQ_SetEvt</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32_seq.o(.text.UTIL_SEQ_SetEvt))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxTimeout
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDone
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxTimeout
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxError
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxDone
</UL>

<P><STRONG><a name="[193]"></a>UTIL_SEQ_SetTask</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32_seq.o(.text.UTIL_SEQ_SetTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UTIL_SEQ_SetTask
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnCertifTimer
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacProcessNotify
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcessNotify
</UL>

<P><STRONG><a name="[355]"></a>UTIL_SEQ_WaitEvt</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, stm32_seq.o(.text.UTIL_SEQ_WaitEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_EvtIdle
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_TX_Start
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_RX_Start
</UL>

<P><STRONG><a name="[7d]"></a>UTIL_TIMER_Create</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, stm32_timer.o(.text.UTIL_TIMER_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UTIL_TIMER_Create
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Certif
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpComplianceInit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lora_app.o(.text.LoRaWAN_Init)
<LI> loramac.o(.text.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[236]"></a>UTIL_TIMER_GetCurrentTime</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32_timer.o(.text.UTIL_TIMER_GetCurrentTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UTIL_TIMER_GetCurrentTime
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpComplianceProcess
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>

<P><STRONG><a name="[21b]"></a>UTIL_TIMER_GetElapsedTime</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, stm32_timer.o(.text.UTIL_TIMER_GetElapsedTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UTIL_TIMER_GetElapsedTime
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonIdentifyChannels
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleResponseTimeout
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>

<P><STRONG><a name="[1d3]"></a>UTIL_TIMER_IRQ_Handler</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, stm32_timer.o(.text.UTIL_TIMER_IRQ_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UTIL_TIMER_IRQ_Handler &rArr; UTIL_TIMER_Start &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmAEventCallback
</UL>

<P><STRONG><a name="[344]"></a>UTIL_TIMER_Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32_timer.o(.text.UTIL_TIMER_Init))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemApp_Init
</UL>

<P><STRONG><a name="[235]"></a>UTIL_TIMER_SetPeriod</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32_timer.o(.text.UTIL_TIMER_SetPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UTIL_TIMER_SetPeriod &rArr; UTIL_TIMER_Start &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerExists
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpComplianceProcess
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpComplianceOnMcpsIndication
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxContinuousWave
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSend
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRxBoosted
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRx
</UL>

<P><STRONG><a name="[146]"></a>UTIL_TIMER_Start</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32_timer.o(.text.UTIL_TIMER_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UTIL_TIMER_Start &rArr; TimerInsertNewHeadTimer &rArr; TimerSetTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsertTimer
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsertNewHeadTimer
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerExists
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_IRQ_Handler
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaWAN_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Certif
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CertifSend
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxData
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxData
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_SetPeriod
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpComplianceProcess
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpComplianceOnMcpsIndication
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxContinuousWave
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSend
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRxBoosted
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRx
</UL>

<P><STRONG><a name="[7a]"></a>UTIL_TIMER_Stop</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32_timer.o(.text.UTIL_TIMER_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UTIL_TIMER_Stop &rArr; TimerSetTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerSetTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnJoinRequest
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_SetPeriod
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpComplianceOnMcpsIndication
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxWindowSetup
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRetransmitTimeoutTimerEvent
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text.LoRaMacHalt)
</UL>
<P><STRONG><a name="[1e]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[139]"></a>lorawan_aes_encrypt</STRONG> (Thumb, 696 bytes, Stack size 88 bytes, lorawan_aes.o(.text.lorawan_aes_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xor_block
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_and_key
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementAesEncrypt
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
</UL>

<P><STRONG><a name="[13d]"></a>lorawan_aes_set_key</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, lorawan_aes.o(.text.lorawan_aes_set_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lorawan_aes_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementAesEncrypt
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_SetKey
</UL>

<P><STRONG><a name="[61]"></a>main</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = main &rArr; MX_LoRaWAN_Init &rArr; LoRaWAN_Init &rArr; LmHandlerConfigure &rArr; LmHandlerSetSystemMaxRxError &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; LoRaMacCryptoDeriveLifeTimeKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LoRaWAN_Process
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LoRaWAN_Init
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[13a]"></a>memcpy1</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, utilities.o(.text.memcpy1))
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetKey
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerConfigure
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementSetKey
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementSetJoinEui
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementSetDevEui
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementProcessJoinAccept
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementInit
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementGetJoinEui
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementGetDevEui
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915InitDefaults
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868InitDefaults
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChannelAdd
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacParserJoinAccept
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSerializerData
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacParserData
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHalt
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoUnsecureMessage
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsSerializeCmds
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsAddCmd
</UL>

<P><STRONG><a name="[288]"></a>memcpyr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, utilities.o(.text.memcpyr))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSerializerJoinRequest
</UL>

<P><STRONG><a name="[138]"></a>memset1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, utilities.o(.text.memset1))
<BR><BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementAesEncrypt
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpComplianceInit
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868LinkAdrReq
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRemoveCmd
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoUnsecureMessage
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoInit
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueInit
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueHandleCb
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsInit
</UL>

<P><STRONG><a name="[2f5]"></a>randr</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, utilities.o(.text.randr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = randr
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionBaseUSComputeNext125kHzJoinChannel
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915NextChannel
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915GetPhyParam
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NextChannel
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868GetPhyParam
</UL>

<P><STRONG><a name="[265]"></a>srand1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, utilities.o(.text.srand1))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[149]"></a>tiny_sscanf</STRONG> (Thumb, 666 bytes, Stack size 88 bytes, stm32_tiny_sscanf.o(.text.tiny_sscanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tiny_sscanf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_verbose_set
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_tx_hopping
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_tx
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_set_config
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_rx
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TransmitPower_set
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Send
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx2Frequency_set
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx2Delay_set
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx2DataRate_set
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx1Delay_set
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Region_set
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_PingSlot_set
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_NetworkID_set
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_JoinEUI_set
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_JoinAcceptDelay2_set
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_JoinAcceptDelay1_set
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DevEUI_set
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DevAddr_set
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DataRate_set
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf_16_hhx
</UL>

<P><STRONG><a name="[35b]"></a>tiny_vsnprintf_like</STRONG> (Thumb, 704 bytes, Stack size 128 bytes, stm32_tiny_vsnprintf.o(.text.tiny_vsnprintf_like))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_snprintf_like
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>

<P><STRONG><a name="[117]"></a>vcom_DeInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usart_if.o(.text.vcom_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = vcom_DeInit &rArr; HAL_UART_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_if.o(.rodata.UTIL_TraceDriver)
</UL>
<P><STRONG><a name="[116]"></a>vcom_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usart_if.o(.text.vcom_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = vcom_Init &rArr; MX_LPUART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_if.o(.rodata.UTIL_TraceDriver)
</UL>
<P><STRONG><a name="[118]"></a>vcom_ReceiveInit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, usart_if.o(.text.vcom_ReceiveInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vcom_ReceiveInit &rArr; HAL_UARTEx_StopModeWakeUpSourceConfig &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_StopModeWakeUpSourceConfig
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_EnableStopMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_if.o(.rodata.UTIL_TraceDriver)
</UL>
<P><STRONG><a name="[2a3]"></a>vcom_Resume</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usart_if.o(.text.vcom_Resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vcom_Resume &rArr; HAL_DMA_Init &rArr; DMA_CalcDMAMUXRequestGenBaseAndMask
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_ExitStopMode
</UL>

<P><STRONG><a name="[119]"></a>vcom_Trace_DMA</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usart_if.o(.text.vcom_Trace_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = vcom_Trace_DMA &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_if.o(.rodata.UTIL_TraceDriver)
</UL>
<P><STRONG><a name="[377]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[378]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[379]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[2f9]"></a>floorf</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, floorf.o(i.floorf))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = floorf &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[8c]"></a>LL_AHB2_GRP1_EnableClock</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, gpio.o(.text.LL_AHB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_AHB2_GRP1_EnableClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.text.MX_GPIO_Init)
</UL>
<P><STRONG><a name="[28e]"></a>LL_AHB1_GRP1_EnableClock</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, dma.o(.text.LL_AHB1_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_AHB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[19f]"></a>FLASH_IF_INT_Clear_Error</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, flash_if.o(.text.FLASH_IF_INT_Clear_Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_IF_INT_Clear_Error
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IF_Write
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IF_INT_Erase
</UL>

<P><STRONG><a name="[19e]"></a>FLASH_IF_INT_Erase</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, flash_if.o(.text.FLASH_IF_INT_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FLASH_IF_INT_Erase &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IF_INT_Clear_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IF_Write
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IF_Erase
</UL>

<P><STRONG><a name="[1a3]"></a>FLASH_IF_INT_Read</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, flash_if.o(.text.FLASH_IF_INT_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_IF_INT_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_MEM_cpy_8
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IF_Write
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IF_Read
</UL>

<P><STRONG><a name="[94]"></a>TimestampNow</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, sys_app.o(.text.TimestampNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = TimestampNow &rArr; tiny_snprintf_like &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGet
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_snprintf_like
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_app.o(.text.SystemApp_Init)
</UL>
<P><STRONG><a name="[358]"></a>tiny_snprintf_like</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sys_app.o(.text.tiny_snprintf_like))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = tiny_snprintf_like &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_vsnprintf_like
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimestampNow
</UL>

<P><STRONG><a name="[19a]"></a>LL_AHB2_GRP1_EnableClock</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, sys_debug.o(.text.LL_AHB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_AHB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Init
</UL>

<P><STRONG><a name="[34d]"></a>GetTimerTicks</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, timer_if.o(.text.GetTimerTicks))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_SetTimerContext
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_GetTimerElapsedTime
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_GetTime
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_GetTimerValue
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_DelayMs
</UL>

<P><STRONG><a name="[1cf]"></a>TIMER_IF_BkUp_Read_MSBticks</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer_if.o(.text.TIMER_IF_BkUp_Read_MSBticks))
<BR><BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPRead
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_GetTime
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SSRUEventCallback
</UL>

<P><STRONG><a name="[1d0]"></a>TIMER_IF_BkUp_Write_MSBticks</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer_if.o(.text.TIMER_IF_BkUp_Write_MSBticks))
<BR><BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_Init
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SSRUEventCallback
</UL>

<P><STRONG><a name="[12d]"></a>ADC_ReadChannels</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, adc_if.o(.text.ADC_ReadChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ADC_ReadChannels &rArr; HAL_ADCEx_Calibration_Start &rArr; ADC_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValue
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_DeInit
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetTemperatureLevel
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetBatteryLevel
</UL>

<P><STRONG><a name="[86]"></a>CmdProcessNotify</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lora_app.o(.text.CmdProcessNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CmdProcessNotify &rArr; UTIL_SEQ_SetTask
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.text.LoRaWAN_Init)
</UL>
<P><STRONG><a name="[c]"></a>OnBeaconStatusChange</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lora_app.o(.text.OnBeaconStatusChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = OnBeaconStatusChange &rArr; AT_event_Beacon &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_event_Beacon
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[b]"></a>OnClassChange</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lora_app.o(.text.OnClassChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = OnClassChange &rArr; AT_event_ClassUpdate &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_event_ClassUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[8]"></a>OnJoinRequest</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lora_app.o(.text.OnJoinRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = OnJoinRequest &rArr; AT_event_join &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_event_join
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[89]"></a>OnJoinTimerLedEvent</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lora_app.o(.text.OnJoinTimerLedEvent))
<BR><BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.text.LoRaWAN_Init)
</UL>
<P><STRONG><a name="[6]"></a>OnMacProcessNotify</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lora_app.o(.text.OnMacProcessNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OnMacProcessNotify &rArr; UTIL_SEQ_SetTask
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[7]"></a>OnNvmDataChange</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lora_app.o(.text.OnNvmDataChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = OnNvmDataChange &rArr; AT_event_OnNvmDataChange &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_event_OnNvmDataChange
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[10]"></a>OnPingSlotPeriodicityChanged</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lora_app.o(.text.OnPingSlotPeriodicityChanged))
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[4]"></a>OnRestoreContextRequest</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lora_app.o(.text.OnRestoreContextRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OnRestoreContextRequest &rArr; AT_event_OnRestoreContextRequest &rArr; FLASH_IF_Read &rArr; FLASH_IF_INT_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_event_OnRestoreContextRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[a]"></a>OnRxData</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lora_app.o(.text.OnRxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = OnRxData &rArr; AT_event_receive &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_event_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[88]"></a>OnRxTimerLedEvent</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lora_app.o(.text.OnRxTimerLedEvent))
<BR><BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.text.LoRaWAN_Init)
</UL>
<P><STRONG><a name="[5]"></a>OnStoreContextRequest</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lora_app.o(.text.OnStoreContextRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = OnStoreContextRequest &rArr; AT_event_OnStoreContextRequest &rArr; FLASH_IF_Write &rArr; FLASH_IF_INT_Erase &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_event_OnStoreContextRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[d]"></a>OnSysTimeUpdate</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lora_app.o(.text.OnSysTimeUpdate))
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[11]"></a>OnSystemReset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lora_app.o(.text.OnSystemReset))
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[9]"></a>OnTxData</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lora_app.o(.text.OnTxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = OnTxData &rArr; AT_event_confirm &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_event_confirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[f]"></a>OnTxFrameCtrlChanged</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lora_app.o(.text.OnTxFrameCtrlChanged))
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[e]"></a>OnTxPeriodicityChanged</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lora_app.o(.text.OnTxPeriodicityChanged))
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[87]"></a>OnTxTimerLedEvent</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lora_app.o(.text.OnTxTimerLedEvent))
<BR><BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.text.LoRaWAN_Init)
</UL>
<P><STRONG><a name="[65]"></a>CertifSend</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lora_at.o(.text.CertifSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = CertifSend &rArr; LmHandlerSend &rArr; LmHandlerJoin &rArr; LoRaMacMlmeRequest &rArr; ScheduleTx &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSend
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoinStatus
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_at.o(.text.AT_Certif)
</UL>
<P><STRONG><a name="[64]"></a>OnCertifTimer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lora_at.o(.text.OnCertifTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OnCertifTimer &rArr; UTIL_SEQ_SetTask
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_at.o(.text.AT_Certif)
</UL>
<P><STRONG><a name="[17d]"></a>__NVIC_SystemReset</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lora_at.o(.text.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_restore_factory_settings
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_reset
</UL>

<P><STRONG><a name="[143]"></a>print_16_02x</STRONG> (Thumb, 112 bytes, Stack size 112 bytes, lora_at.o(.text.print_16_02x))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = print_16_02x &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_NwkSKey_get
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_NwkKey_get
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_AppSKey_get
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_AppKey_get
</UL>

<P><STRONG><a name="[14e]"></a>print_8_02x</STRONG> (Thumb, 88 bytes, Stack size 56 bytes, lora_at.o(.text.print_8_02x))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = print_8_02x &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_JoinEUI_get
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DevEUI_get
</UL>

<P><STRONG><a name="[140]"></a>print_d</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lora_at.o(.text.print_d))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = print_d &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_bat_get
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TransmitPower_get
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx2Frequency_get
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx2DataRate_get
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_PingSlot_get
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_NetworkID_get
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DutyCycle_get
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DataRate_get
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_ADR_get
</UL>

<P><STRONG><a name="[157]"></a>print_u</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lora_at.o(.text.print_u))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = print_u &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_verbose_get
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx2Delay_get
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx1Delay_get
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_JoinAcceptDelay2_get
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_JoinAcceptDelay1_get
</UL>

<P><STRONG><a name="[144]"></a>sscanf_16_hhx</STRONG> (Thumb, 92 bytes, Stack size 80 bytes, lora_at.o(.text.sscanf_16_hhx))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = sscanf_16_hhx &rArr; tiny_sscanf
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_NwkSKey_set
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_NwkKey_set
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_AppSKey_set
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_AppKey_set
</UL>

<P><STRONG><a name="[67]"></a>CMD_GetChar</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, lora_command.o(.text.CMD_GetChar))
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.text.CMD_Init)
</UL>
<P><STRONG><a name="[190]"></a>com_error</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, lora_command.o(.text.com_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = com_error &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Process
</UL>

<P><STRONG><a name="[18d]"></a>LL_AHB2_GRP1_EnableClock</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, stm32wlxx_nucleo_radio.o(.text.LL_AHB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_AHB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RADIO_Init
</UL>

<P><STRONG><a name="[1cd]"></a>RCC_SetFlashLatencyFromMSIRange</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, stm32wlxx_hal_rcc.o(.text.RCC_SetFlashLatencyFromMSIRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_GetVoltageRange
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[1c7]"></a>LL_RCC_SetI2CClockSource</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc_ex.o(.text.LL_RCC_SetI2CClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[1ba]"></a>FLASH_Program_Fast</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32wlxx_hal_flash.o(.text.FLASH_Program_Fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_Program_Fast
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[1b3]"></a>DMA_CalcDMAMUXChannelBaseAndMask</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32wlxx_hal_dma.o(.text.DMA_CalcDMAMUXChannelBaseAndMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_CalcDMAMUXChannelBaseAndMask
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
</UL>

<P><STRONG><a name="[1b4]"></a>DMA_CalcDMAMUXRequestGenBaseAndMask</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32wlxx_hal_dma.o(.text.DMA_CalcDMAMUXRequestGenBaseAndMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_CalcDMAMUXRequestGenBaseAndMask
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
</UL>

<P><STRONG><a name="[1b7]"></a>DMA_SetConfig</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, stm32wlxx_hal_dma.o(.text.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[1c1]"></a>__NVIC_SetPriority</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32wlxx_hal_cortex.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[6a]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wlxx_hal_uart.o(.text.UART_DMAAbortOnError))
<BR><BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32wlxx_hal_uart.o(.text.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[6b]"></a>UART_DMAError</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32wlxx_hal_uart.o(.text.UART_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_DMAError &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32wlxx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[6d]"></a>UART_DMATransmitCplt</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32wlxx_hal_uart.o(.text.UART_DMATransmitCplt))
<BR><BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32wlxx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[6c]"></a>UART_DMATxHalfCplt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32wlxx_hal_uart.o(.text.UART_DMATxHalfCplt))
<BR><BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32wlxx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[1fa]"></a>UART_EndRxTransfer</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32wlxx_hal_uart.o(.text.UART_EndRxTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[359]"></a>UART_EndTxTransfer</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32wlxx_hal_uart.o(.text.UART_EndTxTransfer))
<BR><BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[9a]"></a>UART_RxISR_16BIT</STRONG> (Thumb, 196 bytes, Stack size 0 bytes, stm32wlxx_hal_uart.o(.text.UART_RxISR_16BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_RxISR_16BIT &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32wlxx_hal_uart.o(.text.UART_Start_Receive_IT)
<LI> stm32wlxx_hal_uart.o(.text.UART_RxISR_16BIT_FIFOEN)
</UL>
<P><STRONG><a name="[9c]"></a>UART_RxISR_16BIT_FIFOEN</STRONG> (Thumb, 428 bytes, Stack size 40 bytes, stm32wlxx_hal_uart.o(.text.UART_RxISR_16BIT_FIFOEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART_RxISR_16BIT_FIFOEN &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32wlxx_hal_uart.o(.text.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[9d]"></a>UART_RxISR_8BIT</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, stm32wlxx_hal_uart.o(.text.UART_RxISR_8BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_RxISR_8BIT &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32wlxx_hal_uart.o(.text.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[9b]"></a>UART_RxISR_8BIT_FIFOEN</STRONG> (Thumb, 432 bytes, Stack size 40 bytes, stm32wlxx_hal_uart.o(.text.UART_RxISR_8BIT_FIFOEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART_RxISR_8BIT_FIFOEN &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32wlxx_hal_uart.o(.text.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[1f4]"></a>UARTEx_SetNbDataToProcess</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32wlxx_hal_uart_ex.o(.text.UARTEx_SetNbDataToProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_EnableFifoMode
</UL>

<P><STRONG><a name="[12]"></a>LmhpComplianceInit</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lmhpcompliance.o(.text.LmhpComplianceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LmhpComplianceInit &rArr; UTIL_TIMER_Create
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Create
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhpcompliance.o(.data.CompliancePackage)
</UL>
<P><STRONG><a name="[13]"></a>LmhpComplianceIsInitialized</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lmhpcompliance.o(.text.LmhpComplianceIsInitialized))
<BR>[Address Reference Count : 1]<UL><LI> lmhpcompliance.o(.data.CompliancePackage)
</UL>
<P><STRONG><a name="[14]"></a>LmhpComplianceIsTxPending</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lmhpcompliance.o(.text.LmhpComplianceIsTxPending))
<BR>[Address Reference Count : 1]<UL><LI> lmhpcompliance.o(.data.CompliancePackage)
</UL>
<P><STRONG><a name="[16]"></a>LmhpComplianceOnMcpsIndication</STRONG> (Thumb, 892 bytes, Stack size 72 bytes, lmhpcompliance.o(.text.LmhpComplianceOnMcpsIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = LmhpComplianceOnMcpsIndication &rArr; LoRaMacMlmeRequest &rArr; ScheduleTx &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_SetPeriod
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacTestSetDutyCycleOn
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhpcompliance.o(.data.CompliancePackage)
</UL>
<P><STRONG><a name="[17]"></a>LmhpComplianceOnMlmeConfirm</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lmhpcompliance.o(.text.LmhpComplianceOnMlmeConfirm))
<BR>[Address Reference Count : 1]<UL><LI> lmhpcompliance.o(.data.CompliancePackage)
</UL>
<P><STRONG><a name="[18]"></a>LmhpComplianceOnMlmeIndication</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lmhpcompliance.o(.text.LmhpComplianceOnMlmeIndication))
<BR>[Address Reference Count : 1]<UL><LI> lmhpcompliance.o(.data.CompliancePackage)
</UL>
<P><STRONG><a name="[15]"></a>LmhpComplianceProcess</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, lmhpcompliance.o(.text.LmhpComplianceProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = LmhpComplianceProcess &rArr; LmHandlerSend &rArr; LmHandlerJoin &rArr; LoRaMacMlmeRequest &rArr; ScheduleTx &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSend
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerRequestClass
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_SetPeriod
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_GetCurrentTime
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetDutyCycleWaitTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhpcompliance.o(.data.CompliancePackage)
</UL>
<P><STRONG><a name="[79]"></a>OnProcessTimer</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lmhpcompliance.o(.text.OnProcessTimer))
<BR>[Address Reference Count : 1]<UL><LI> lmhpcompliance.o(.text.LmhpComplianceInit)
</UL>
<P><STRONG><a name="[366]"></a>copy_and_key</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, lorawan_aes.o(.text.copy_and_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = copy_and_key
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_aes_encrypt
</UL>

<P><STRONG><a name="[367]"></a>xor_block</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, lorawan_aes.o(.text.xor_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xor_block
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_aes_encrypt
</UL>

<P><STRONG><a name="[194]"></a>ComputeCmac</STRONG> (Thumb, 102 bytes, Stack size 328 bytes, soft-se.o(.text.ComputeCmac))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyByID
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_SetKey
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementVerifyAesCmac
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementComputeAesCmac
</UL>

<P><STRONG><a name="[195]"></a>GetKeyByID</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, soft-se.o(.text.GetKeyByID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetKeyByID
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementAesEncrypt
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCmac
</UL>

<P><STRONG><a name="[2a5]"></a>PrintIds</STRONG> (Thumb, 292 bytes, Stack size 80 bytes, soft-se.o(.text.PrintIds))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = PrintIds &rArr; SecureElementGetJoinEui
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementGetJoinEui
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementGetDevEui
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementPrintSessionKeys
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementPrintKeys
</UL>

<P><STRONG><a name="[93]"></a>PrintKey</STRONG> (Thumb, 164 bytes, Stack size 128 bytes, soft-se.o(.text.PrintKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = PrintKey &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementGetKeyByID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> soft-se.o(.text.SecureElementPrintSessionKeys)
</UL>
<P><STRONG><a name="[303]"></a>GetDutyCycle</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, regioncommon.o(.text.GetDutyCycle))
<BR><BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonSetBandTxDone
</UL>

<P><STRONG><a name="[1ac]"></a>GetTimeOnAir</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, regioneu868.o(.text.GetTimeOnAir))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetTimeOnAir
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonGetBandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868TxConfig
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NextChannel
</UL>

<P><STRONG><a name="[30f]"></a>VerifyRfFreq</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, regioneu868.o(.text.VerifyRfFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VerifyRfFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868Verify
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868RxParamSetupReq
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868DlChannelReq
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChannelAdd
</UL>

<P><STRONG><a name="[1ae]"></a>GetTimeOnAir</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, regionus915.o(.text.GetTimeOnAir))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetTimeOnAir
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonGetBandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915TxConfig
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915NextChannel
</UL>

<P><STRONG><a name="[32f]"></a>VerifyRfFreq</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, regionus915.o(.text.VerifyRfFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VerifyRfFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915Verify
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915RxParamSetupReq
</UL>

<P><STRONG><a name="[1aa]"></a>GetMaxAppPayloadWithoutFOptsLength</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, loramac.o(.text.GetMaxAppPayloadWithoutFOptsLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GetMaxAppPayloadWithoutFOptsLength &rArr; RegionGetPhyParam &rArr; RegionUS915GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacQueryTxPossible
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
</UL>

<P><STRONG><a name="[210]"></a>HandleRadioRxErrorTimeout</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, loramac.o(.text.HandleRadioRxErrorTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HandleRadioRxErrorTimeout &rArr; UTIL_TIMER_Stop &rArr; TimerSetTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_GetElapsedTime
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueSetStatusCmn
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBSetPingSlotState
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBSetMulticastSlotState
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBSetBeaconState
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBPingSlotTimerEvent
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBMulticastSlotTimerEvent
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsPingExpected
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsMulticastExpected
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsBeaconExpected
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBBeaconTimerEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[25d]"></a>LoRaMacHandleNvm</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, loramac.o(.text.LoRaMacHandleNvm))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LoRaMacHandleNvm &rArr; Crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHalt
</UL>

<P><STRONG><a name="[25f]"></a>LoRaMacHandleResponseTimeout</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, loramac.o(.text.LoRaMacHandleResponseTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LoRaMacHandleResponseTimeout &rArr; UTIL_TIMER_GetElapsedTime
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_GetElapsedTime
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
</UL>

<P><STRONG><a name="[27d]"></a>OnMacProcessNotify</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, loramac.o(.text.OnMacProcessNotify))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRetransmitTimeoutTimerEvent
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxTimeout
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxTimeout
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxError
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
</UL>

<P><STRONG><a name="[82]"></a>OnRadioRxDone</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, loramac.o(.text.OnRadioRxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = OnRadioRxDone &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_GetCurrentTime
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacProcessNotify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[81]"></a>OnRadioRxError</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, loramac.o(.text.OnRadioRxError))
<BR><BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacProcessNotify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[84]"></a>OnRadioRxTimeout</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, loramac.o(.text.OnRadioRxTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = OnRadioRxTimeout &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacProcessNotify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[83]"></a>OnRadioTxDone</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, loramac.o(.text.OnRadioTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = OnRadioTxDone &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGet
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_GetCurrentTime
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacProcessNotify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[85]"></a>OnRadioTxTimeout</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, loramac.o(.text.OnRadioTxTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = OnRadioTxTimeout &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacProcessNotify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[80]"></a>OnRetransmitTimeoutTimerEvent</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, loramac.o(.text.OnRetransmitTimeoutTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OnRetransmitTimeoutTimerEvent &rArr; UTIL_TIMER_Stop &rArr; TimerSetTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacProcessNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareRxDoneAbort
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[7e]"></a>OnRxWindow1TimerEvent</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, loramac.o(.text.OnRxWindow1TimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = OnRxWindow1TimerEvent &rArr; RxWindowSetup &rArr; RegionRxConfig &rArr; RegionUS915RxConfig &rArr; RegionCommonRxConfigPrint &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxWindowSetup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[7f]"></a>OnRxWindow2TimerEvent</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, loramac.o(.text.OnRxWindow2TimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = OnRxWindow2TimerEvent &rArr; RxWindowSetup &rArr; RegionRxConfig &rArr; RegionUS915RxConfig &rArr; RegionCommonRxConfigPrint &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxWindowSetup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[7c]"></a>OnTxDelayedTimerEvent</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, loramac.o(.text.OnTxDelayedTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = OnTxDelayedTimerEvent &rArr; ScheduleTx &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopRetransmission
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleResponseTimeout
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueSetStatusCmn
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[274]"></a>OpenContinuousRxCWindow</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, loramac.o(.text.OpenContinuousRxCWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = OpenContinuousRxCWindow &rArr; RegionRxConfig &rArr; RegionUS915RxConfig &rArr; RegionCommonRxConfigPrint &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchClass
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[282]"></a>PrepareRxDoneAbort</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, loramac.o(.text.PrepareRxDoneAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PrepareRxDoneAbort &rArr; OnRetransmitTimeoutTimerEvent &rArr; UTIL_TIMER_Stop &rArr; TimerSetTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRetransmitTimeoutTimerEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[287]"></a>ProcessMacCommands</STRONG> (Thumb, 1436 bytes, Stack size 112 bytes, loramac.o(.text.ProcessMacCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ProcessMacCommands &rArr; RegionLinkAdrReq &rArr; RegionUS915LinkAdrReq &rArr; RegionUS915GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGet
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxParamSetupReq
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxParamSetupReq
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNewChannelReq
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionLinkAdrReq
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionDlChannelReq
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSub
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSet
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeAdd
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueSetStatus
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueIsCmdActive
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsGetCmdSize
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsAddCmd
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBPingSlotInfoAns
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBPingSlotChannelReq
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBDeviceTimeAns
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBBeaconTimingAns
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBBeaconFreqReq
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[261]"></a>ResetMacParameters</STRONG> (Thumb, 324 bytes, Stack size 80 bytes, loramac.o(.text.ResetMacParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ResetMacParameters &rArr; RegionInitDefaults &rArr; RegionEU868InitDefaults
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBInit
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[29d]"></a>RxWindowSetup</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, loramac.o(.text.RxWindowSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = RxWindowSetup &rArr; RegionRxConfig &rArr; RegionUS915RxConfig &rArr; RegionCommonRxConfigPrint &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow1TimerEvent
</UL>

<P><STRONG><a name="[269]"></a>ScheduleTx</STRONG> (Thumb, 732 bytes, Stack size 88 bytes, loramac.o(.text.ScheduleTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = ScheduleTx &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_SetPeriod
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxConfig
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNextChannel
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyDrOffset
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSub
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMaxAppPayloadWithoutFOptsLength
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGetMcuTime
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSerializerJoinRequest
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSerializerData
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSecureMessage
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoPrepareJoinRequest
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoGetFCntUp
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsGetSizeSerializedCmds
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBStopRxSlots
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsUplinkCollision
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsPingExpected
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsMulticastExpected
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsBeaconModeActive
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsBeaconExpected
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBHaltBeaconing
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
</UL>

<P><STRONG><a name="[284]"></a>StopRetransmission</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, loramac.o(.text.StopRetransmission))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[26f]"></a>SwitchClass</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, loramac.o(.text.SwitchClass))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = SwitchClass &rArr; OpenContinuousRxCWindow &rArr; RegionRxConfig &rArr; RegionUS915RxConfig &rArr; RegionCommonRxConfigPrint &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenContinuousRxCWindow
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBSwitchClass
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[241]"></a>GetElement</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, loramacconfirmqueue.o(.text.GetElement))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetElement
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueSetStatus
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueIsCmdActive
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueGetStatus
</UL>

<P><STRONG><a name="[19c]"></a>DeriveSessionKey10x</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, loramaccrypto.o(.text.DeriveSessionKey10x))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = DeriveSessionKey10x &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementDeriveAndStoreKey
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
</UL>

<P><STRONG><a name="[25a]"></a>GetKeyAddrItem</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, loramaccrypto.o(.text.GetKeyAddrItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetKeyAddrItem
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoUnsecureMessage
</UL>

<P><STRONG><a name="[24a]"></a>GetLastFcntDown</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, loramaccrypto.o(.text.GetLastFcntDown))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoUnsecureMessage
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoGetFCntDown
</UL>

<P><STRONG><a name="[254]"></a>PayloadEncrypt</STRONG> (Thumb, 192 bytes, Stack size 72 bytes, loramaccrypto.o(.text.PayloadEncrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = PayloadEncrypt &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementAesEncrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoUnsecureMessage
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSecureMessage
</UL>

<P><STRONG><a name="[256]"></a>PrepareB0</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, loramaccrypto.o(.text.PrepareB0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PrepareB0
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoUnsecureMessage
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSecureMessage
</UL>

<P><STRONG><a name="[74]"></a>LmHandlerOnPingSlotPeriodicityChanged</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lmhandler.o(.text.LmHandlerOnPingSlotPeriodicityChanged))
<BR>[Address Reference Count : 1]<UL><LI> lmhandler.o(.text.LmHandlerInit)
</UL>
<P><STRONG><a name="[75]"></a>LmHandlerOnTxFrameCtrlChanged</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lmhandler.o(.text.LmHandlerOnTxFrameCtrlChanged))
<BR>[Address Reference Count : 1]<UL><LI> lmhandler.o(.text.LmHandlerInit)
</UL>
<P><STRONG><a name="[22f]"></a>LmHandlerPackageIsTxPending</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lmhandler.o(.text.LmHandlerPackageIsTxPending))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LmHandlerPackageIsTxPending
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerProcess
</UL>

<P><STRONG><a name="[299]"></a>LmHandlerPackagesNotify</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, lmhandler.o(.text.LmHandlerPackagesNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LmHandlerPackagesNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MlmeIndication
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MlmeConfirm
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsIndication
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsConfirm
</UL>

<P><STRONG><a name="[72]"></a>McpsConfirm</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lmhandler.o(.text.McpsConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = McpsConfirm &rArr; LmHandlerPackagesNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerPackagesNotify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhandler.o(.text.LmHandlerInit)
</UL>
<P><STRONG><a name="[71]"></a>McpsIndication</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, lmhandler.o(.text.McpsIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = McpsIndication &rArr; LmHandlerGetCurrentClass &rArr; LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionUS915GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetCurrentClass
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerPackagesNotify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhandler.o(.text.LmHandlerInit)
</UL>
<P><STRONG><a name="[70]"></a>MlmeConfirm</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, lmhandler.o(.text.MlmeConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = MlmeConfirm &rArr; LmHandlerDeviceTimeReq &rArr; LoRaMacMlmeRequest &rArr; ScheduleTx &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt &rArr; xor_block
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerRequestClass
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetTxPower
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetTxDatarate
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementSetDevAddr
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementPrintSessionKeys
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerDeviceTimeReq
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerPackagesNotify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhandler.o(.text.LmHandlerInit)
</UL>
<P><STRONG><a name="[6f]"></a>MlmeIndication</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, lmhandler.o(.text.MlmeIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MlmeIndication &rArr; LmHandlerPackagesNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerPackagesNotify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhandler.o(.text.LmHandlerInit)
</UL>
<P><STRONG><a name="[e6]"></a>RadioCheckRfFrequency</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio.o(.text.RadioCheckRfFrequency))
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[df]"></a>RadioGetStatus</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, radio.o(.text.RadioGetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RadioGetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetOperatingMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[f5]"></a>RadioGetWakeupTime</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, radio.o(.text.RadioGetWakeupTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RadioGetWakeupTime
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetRadioWakeUpTime
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[de]"></a>RadioInit</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, radio.o(.text.RadioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = RadioInit &rArr; RadioSleep &rArr; SUBGRF_SetSleep &rArr; Radio_SMPS_Set &rArr; SUBGRF_ReadRegister &rArr; HAL_SUBGHZ_ReadRegisters &rArr; SUBGHZSPI_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Create
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetTxParams
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRegulatorMode
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetDioIrqParams
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetBufferBaseAddress
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[f6]"></a>RadioIrqProcess</STRONG> (Thumb, 728 bytes, Stack size 24 bytes, radio.o(.text.RadioIrqProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RadioIrqProcess &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegister
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetStandby
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetDioIrqParams
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_ReadRegister
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetPayload
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetPacketStatus
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetOperatingMode
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetCFO
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFW_ReceivePayload
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFW_Is_LongPacketModeEnabled
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFW_Is_Init
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFW_DeInit_TxLongPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioOnDioIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[e2]"></a>RadioIsChannelFree</STRONG> (Thumb, 126 bytes, Stack size 64 bytes, radio.o(.text.RadioIsChannelFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = RadioIsChannelFree &rArr; RadioSetRxConfig &rArr; SUBGRF_SetPacketParams &rArr; SUBGRF_SetPacketType &rArr; SUBGRF_WriteRegister &rArr; HAL_SUBGHZ_WriteRegisters &rArr; SUBGHZSPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_GetCurrentTime
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_GetElapsedTime
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRfFrequency
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetRssiInst
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioStandby
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetModem
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRx
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGetWakeupTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[100]"></a>RadioLrFhssGetTimeOnAirInMs</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio.o(.text.RadioLrFhssGetTimeOnAirInMs))
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[ff]"></a>RadioLrFhssSetCfg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio.o(.text.RadioLrFhssSetCfg))
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[8e]"></a>RadioOnDioIrq</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, radio.o(.text.RadioOnDioIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RadioOnDioIrq &rArr; RadioIrqProcess &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.text.RadioInit)
</UL>
<P><STRONG><a name="[90]"></a>RadioOnRxTimeoutIrq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, radio.o(.text.RadioOnRxTimeoutIrq))
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.text.RadioInit)
</UL>
<P><STRONG><a name="[8f]"></a>RadioOnTxTimeoutIrq</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, radio.o(.text.RadioOnTxTimeoutIrq))
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.text.RadioInit)
</UL>
<P><STRONG><a name="[e3]"></a>RadioRandom</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, radio.o(.text.RadioRandom))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = RadioRandom &rArr; SUBGRF_GetRandom &rArr; SUBGRF_ReadRegister &rArr; HAL_SUBGHZ_ReadRegisters &rArr; SUBGHZSPI_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetDioIrqParams
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetRandom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[f0]"></a>RadioRead</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio.o(.text.RadioRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = RadioRead &rArr; SUBGRF_ReadRegister &rArr; HAL_SUBGHZ_ReadRegisters &rArr; SUBGHZSPI_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_ReadRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[f2]"></a>RadioReadRegisters</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio.o(.text.RadioReadRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = RadioReadRegisters &rArr; SUBGRF_ReadRegisters &rArr; HAL_SUBGHZ_ReadRegisters &rArr; SUBGHZSPI_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_ReadRegisters
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[ee]"></a>RadioRssi</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, radio.o(.text.RadioRssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = RadioRssi &rArr; SUBGRF_GetRssiInst &rArr; SUBGRF_ReadCommand &rArr; HAL_SUBGHZ_ExecGetCmd &rArr; SUBGHZSPI_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetRssiInst
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[eb]"></a>RadioRx</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, radio.o(.text.RadioRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = RadioRx &rArr; SUBGRF_SetSwitch &rArr; Radio_SMPS_Set &rArr; SUBGRF_ReadRegister &rArr; HAL_SUBGHZ_ReadRegisters &rArr; SUBGHZSPI_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_SetPeriod
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSwitch
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRx
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetDioIrqParams
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFW_ReceiveInit
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFW_Is_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[f7]"></a>RadioRxBoosted</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, radio.o(.text.RadioRxBoosted))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = RadioRxBoosted &rArr; SUBGRF_SetSwitch &rArr; Radio_SMPS_Set &rArr; SUBGRF_ReadRegister &rArr; HAL_SUBGHZ_ReadRegisters &rArr; SUBGHZSPI_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_SetPeriod
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSwitch
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRxBoosted
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetDioIrqParams
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFW_ReceiveInit
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFW_Is_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[e8]"></a>RadioSend</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, radio.o(.text.RadioSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RadioSend &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_SetPeriod
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegister
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSwitch
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPacketParams
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetDioIrqParams
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SendPayload
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_ReadRegister
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFW_TransmitInit
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFW_Is_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[e1]"></a>RadioSetChannel</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio.o(.text.RadioSetChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = RadioSetChannel &rArr; SUBGRF_SetRfFrequency &rArr; SUBGRF_CalibrateImage &rArr; SUBGRF_WriteCommand &rArr; HAL_SUBGHZ_ExecSetCmd &rArr; SUBGHZSPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRfFrequency
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[f3]"></a>RadioSetMaxPayloadLength</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, radio.o(.text.RadioSetMaxPayloadLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = RadioSetMaxPayloadLength &rArr; SUBGRF_SetPacketParams &rArr; SUBGRF_SetPacketType &rArr; SUBGRF_WriteRegister &rArr; HAL_SUBGHZ_WriteRegisters &rArr; SUBGHZSPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPacketParams
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[e0]"></a>RadioSetModem</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, radio.o(.text.RadioSetModem))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = RadioSetModem &rArr; SUBGRF_SetPacketType &rArr; SUBGRF_WriteRegister &rArr; HAL_SUBGHZ_WriteRegisters &rArr; SUBGHZSPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPacketType
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFW_SetRadioModem
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetPublicNetwork
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxGenericConfig
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxGenericConfig
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetPublicNetwork
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[f4]"></a>RadioSetPublicNetwork</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, radio.o(.text.RadioSetPublicNetwork))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + In Cycle
<LI>Call Chain = RadioSetPublicNetwork &rArr;  RadioSetModem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegister
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetModem
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetModem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[e4]"></a>RadioSetRxConfig</STRONG> (Thumb, 460 bytes, Stack size 48 bytes, radio.o(.text.RadioSetRxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = RadioSetRxConfig &rArr; SUBGRF_SetPacketParams &rArr; SUBGRF_SetPacketType &rArr; SUBGRF_WriteRegister &rArr; HAL_SUBGHZ_WriteRegisters &rArr; SUBGHZSPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegister
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetWhiteningSeed
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSyncWord
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetStopRxTimerOnPreambleDetect
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPacketParams
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetModulationParams
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetLoRaSymbNumTimeout
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_ReadRegister
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetFskBandwidthRegValue
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFW_DeInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioStandby
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetModem
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[f8]"></a>RadioSetRxDutyCycle</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, radio.o(.text.RadioSetRxDutyCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = RadioSetRxDutyCycle &rArr; SUBGRF_SetSwitch &rArr; Radio_SMPS_Set &rArr; SUBGRF_ReadRegister &rArr; HAL_SUBGHZ_ReadRegisters &rArr; SUBGHZSPI_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSwitch
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRxDutyCycle
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetDioIrqParams
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[fb]"></a>RadioSetRxGenericConfig</STRONG> (Thumb, 508 bytes, Stack size 56 bytes, radio.o(.text.RadioSetRxGenericConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = RadioSetRxGenericConfig &rArr; SUBGRF_SetPacketParams &rArr; SUBGRF_SetPacketType &rArr; SUBGRF_WriteRegister &rArr; HAL_SUBGHZ_WriteRegisters &rArr; SUBGHZSPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_MEM_cpy_8
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegister
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetWhiteningSeed
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSyncWord
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetStopRxTimerOnPreambleDetect
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPacketParams
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetModulationParams
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetLoRaSymbNumTimeout
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetCrcPolynomial
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_ReadRegister
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetFskBandwidthRegValue
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFW_Init
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFW_DeInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioStandby
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetModem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[e5]"></a>RadioSetTxConfig</STRONG> (Thumb, 356 bytes, Stack size 48 bytes, radio.o(.text.RadioSetTxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = RadioSetTxConfig &rArr; SUBGRF_SetRfTxPower &rArr; SUBGRF_SetTxParams &rArr; SUBGRF_ReadRegister &rArr; HAL_SUBGHZ_ReadRegisters &rArr; SUBGHZSPI_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegister
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetWhiteningSeed
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSyncWord
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRfTxPower
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPacketParams
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetModulationParams
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetFskBandwidthRegValue
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFW_SetAntSwitch
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFW_DeInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioStandby
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetModem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[ed]"></a>RadioSetTxContinuousWave</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, radio.o(.text.RadioSetTxContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = RadioSetTxContinuousWave &rArr; SUBGRF_SetRfTxPower &rArr; SUBGRF_SetTxParams &rArr; SUBGRF_ReadRegister &rArr; HAL_SUBGHZ_ReadRegisters &rArr; SUBGHZSPI_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_SetPeriod
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegister
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetTxContinuousWave
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSwitch
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRfTxPower
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRfFrequency
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[fc]"></a>RadioSetTxGenericConfig</STRONG> (Thumb, 616 bytes, Stack size 56 bytes, radio.o(.text.RadioSetTxGenericConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = RadioSetTxGenericConfig &rArr; SUBGRF_SetRfTxPower &rArr; SUBGRF_SetTxParams &rArr; SUBGRF_ReadRegister &rArr; HAL_SUBGHZ_ReadRegisters &rArr; SUBGHZSPI_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_MEM_cpy_8
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegister
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetWhiteningSeed
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSyncWord
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRfTxPower
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPacketParams
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetModulationParams
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetCrcPolynomial
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_ReadRegister
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFW_SetAntSwitch
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFW_Init
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFW_DeInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioStandby
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetModem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[e9]"></a>RadioSleep</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, radio.o(.text.RadioSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = RadioSleep &rArr; SUBGRF_SetSleep &rArr; Radio_SMPS_Set &rArr; SUBGRF_ReadRegister &rArr; HAL_SUBGHZ_ReadRegisters &rArr; SUBGHZSPI_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSleep
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[ea]"></a>RadioStandby</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, radio.o(.text.RadioStandby))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = RadioStandby &rArr; SUBGRF_SetStandby &rArr; SUBGRF_WriteCommand &rArr; HAL_SUBGHZ_ExecSetCmd &rArr; SUBGHZSPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetStandby
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxGenericConfig
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxGenericConfig
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[ec]"></a>RadioStartCad</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, radio.o(.text.RadioStartCad))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = RadioStartCad &rArr; SUBGRF_SetSwitch &rArr; Radio_SMPS_Set &rArr; SUBGRF_ReadRegister &rArr; HAL_SUBGHZ_ReadRegisters &rArr; SUBGHZSPI_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSwitch
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetDioIrqParams
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetCad
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[e7]"></a>RadioTimeOnAir</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, radio.o(.text.RadioTimeOnAir))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RadioTimeOnAir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[fa]"></a>RadioTxCw</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, radio.o(.text.RadioTxCw))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = RadioTxCw &rArr; SUBGRF_SetRfTxPower &rArr; SUBGRF_SetTxParams &rArr; SUBGRF_ReadRegister &rArr; HAL_SUBGHZ_ReadRegisters &rArr; SUBGHZSPI_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegister
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetTxContinuousWave
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSwitch
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRfTxPower
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[f9]"></a>RadioTxPrbs</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, radio.o(.text.RadioTxPrbs))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = RadioTxPrbs &rArr; SUBGRF_SetSwitch &rArr; Radio_SMPS_Set &rArr; SUBGRF_ReadRegister &rArr; HAL_SUBGHZ_ReadRegisters &rArr; SUBGHZSPI_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegister
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetTxInfinitePreamble
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetTx
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSwitch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[ef]"></a>RadioWrite</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio.o(.text.RadioWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = RadioWrite &rArr; SUBGRF_WriteRegister &rArr; HAL_SUBGHZ_WriteRegisters &rArr; SUBGHZSPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[f1]"></a>RadioWriteRegisters</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio.o(.text.RadioWriteRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = RadioWriteRegisters &rArr; SUBGRF_WriteRegisters &rArr; HAL_SUBGHZ_WriteRegisters &rArr; SUBGHZSPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegisters
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[2ec]"></a>Radio_SMPS_Set</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, radio_driver.o(.text.Radio_SMPS_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Radio_SMPS_Set &rArr; SUBGRF_ReadRegister &rArr; HAL_SUBGHZ_ReadRegisters &rArr; SUBGHZSPI_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBI_IsDCDC
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegister
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSwitch
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSleep
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_Init
</UL>

<P><STRONG><a name="[35c]"></a>TRACE_AllocateBufer</STRONG> (Thumb, 124 bytes, Stack size 20 bytes, stm32_adv_trace.o(.text.TRACE_AllocateBufer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TRACE_AllocateBufer
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>

<P><STRONG><a name="[351]"></a>TRACE_Lock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32_adv_trace.o(.text.TRACE_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACE_Send
</UL>

<P><STRONG><a name="[350]"></a>TRACE_Send</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, stm32_adv_trace.o(.text.TRACE_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TRACE_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_PreSendHook
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACE_UnLock
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACE_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>

<P><STRONG><a name="[9e]"></a>TRACE_TxCpltCallback</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, stm32_adv_trace.o(.text.TRACE_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TRACE_TxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_PostSendHook
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACE_UnLock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_adv_trace.o(.text.UTIL_ADV_TRACE_Init)
</UL>
<P><STRONG><a name="[352]"></a>TRACE_UnLock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32_adv_trace.o(.text.TRACE_UnLock))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACE_TxCpltCallback
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACE_Send
</UL>

<P><STRONG><a name="[342]"></a>CalendarDiv60</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32_systime.o(.text.CalendarDiv60))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CalendarDiv60
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeLocalTime
</UL>

<P><STRONG><a name="[343]"></a>CalendarDiv61</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32_systime.o(.text.CalendarDiv61))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CalendarDiv61
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeLocalTime
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
